{"version":3,"sources":["images/x.svg","lib/util.js","components/Cell.js","components/SubGrid.js","components/Grid.js","components/ErrorBoundary.js","components/Header.js","components/Coordinates.js","components/Main.js","components/Buttons.js","components/Footer.js","components/Crop.js","components/Print.js","App.js","reportWebVitals.js","index.js"],"names":["serializeGridData","gridData","flat","join","binaryStringToHexStringWithLeftovers","binaryString","hexStringWithLeftovers","i","length","nibble","substring","parseInt","toString","toUpperCase","generateCoordinatesOrder","gridSize","coordinatesOrder","gridY","gridX","push","x","y","arr","j","temp","Math","floor","random","shuffleArray","jimpToSerializedGridData","jimpFile","subGridSize","serializedGridData","bitmap","width","height","gridWidthAndHeight","Error","subGridY","subGridX","Jimp","intToRGBA","getPixelColor","r","g","b","a","gridDataToJimp","filledColor","emptyColor","count","setPixelColor","rgbaToInt","getXLabelValues","game","labelValues","continuousCells","getYLabel","decimalToHex","dec","padStart","getCoordinateLabel","Cell","props","scale","minimumWidthAndHeight","React","useState","isCrossedOut","crossedOut","setCrossedOut","onCellEdit","onCellChanged","isPrinting","isFilled","widthAndHeight","className","style","backgroundColor","undefined","backgroundImage","X","minWidth","minHeight","onPointerDown","e","button","onContextMenu","preventDefault","onCrossOut","isAuthoring","isCrossingOut","onMouseEnter","isFilling","buttons","which","SubGrid","isCoordinate","isRevealing","initialSubGridData","subGridData","subGridFilling","subGridDataRow","subGridFillingRow","initialValue","state","setTimeout","setState","bind","isSolved","value","this","JSON","stringify","solvedColor","unsolvedColor","border","touchAction","map","rowIndex","colIndex","Component","Grid","noFloat","float","paddingRight","margin","Array","fill","_","verticalAlign","paddingDown","valueIndex","textAlign","ErrorBoundary","hasError","error","onError","Button","variant","type","onClick","window","location","reload","children","Header","href","changeGame","Coordinates","coordinates","index","Main","Buttons","changeMode","clear","revealSolution","invert","importImage","exportImage","share","resizeGrids","print","isReadOnly","gridSizeMin","gridSizeMax","subGridSizeMin","subGridSizeMax","nonogramGridSizeMin","nonogramGridSizeMax","Row","Col","DropdownButton","title","filter","size","Dropdown","Item","onSelect","Form","Label","Control","name","accept","onChange","Group","Footer","target","rel","icon","faGithub","Crop","isCropping","crop","cropComponentRef","createRef","onImageLoaded","getCroppedImg","onCropComplete","onCropChange","onAspectChange","image","imageRef","fileName","canvas","document","createElement","pixelRatio","devicePixelRatio","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","setTransform","imageSmoothingQuality","drawImage","Promise","resolve","reject","toBlob","blob","URL","revokeObjectURL","fileUrl","createObjectURL","croppedImageUrl","onCropProcessed","percentCrop","isInitializing","widthPercentage","heightPercentage","isSquare","aspect","unit","current","onMediaLoaded","imageSrc","loading","position","src","ruleOfThirds","onComplete","ref","controlId","Check","label","checked","Print","preventUnload","returnValue","App","isLoading","printableRef","initializeGrid","confirmChangeGame","confirmChangeMode","confirmImportImage","searchParams","URLSearchParams","search","query","Object","fromEntries","entries","includes","onselectstart","addEventListener","removeEventListener","inputGridData","pow","split","hexString","leftovers","digit","hexStringWithLeftoversToBinaryString","gridRow","subGridRow","generateGrid","filled","crossed","confirmAlert","message","set","delete","navigate","childrenElement","invertedSerializedGridData","file","files","reader","FileReader","read","result","getBase64","MIME_PNG","err","importedImageSrc","closeOnClickOutside","readAsDataURL","largerDimension","background","contain","resize","getBufferAsync","MIME_JPEG","u8","stringChar","reduce","data","byte","String","fromCharCode","b64Encoded","btoa","protocol","host","pathname","navigator","clipboard","writeText","toast","success","gridDataToPrint","trigger","content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2cba4f5c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/x.f5457199.svg\";","import Jimp from 'jimp/es'\n\n// https://stackoverflow.com/a/10142256/12055600\nconst shuffleArray = arr => {\n  let i = arr.length\n  let j\n  let temp\n\n  if (i === 0) {\n    return arr\n  }\n\n  while (--i) {\n    j = Math.floor(Math.random() * (i + 1))\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n  }\n\n  return arr\n}\n\nexport const serializeGridData = gridData => gridData.flat().flat().flat().join('')\n\nexport const binaryStringToHexStringWithLeftovers = binaryString => {\n  let hexStringWithLeftovers = ''\n\n  for (let i = 0; i < binaryString.length; i += 4) {\n    const nibble = binaryString.substring(i, i + 4)\n\n    if (nibble.length === 4) {\n      hexStringWithLeftovers += parseInt(nibble, 2).toString(16).toUpperCase()\n    } else {\n      hexStringWithLeftovers += '_' + nibble\n    }\n  }\n\n  return hexStringWithLeftovers\n}\n\nexport const hexStringWithLeftoversToBinaryString = hexStringWithLeftovers => {\n  const [hexString, leftovers] = hexStringWithLeftovers.split('_')\n\n  return hexString.split('').map(digit => parseInt(digit, 16).toString(2).padStart(4, '0')).join('') + leftovers\n}\n\nexport const generateGrid = (gridSize, subGridSize, serializedGridData) => {\n  const gridData = []\n  let count = 0\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    const gridRow = []\n\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      const subGridData = []\n\n      for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n        const subGridRow = []\n\n        for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n          const value = (serializedGridData) ? serializedGridData[count] : '0'\n          subGridRow.push((value === '1') ? 1 : 0)\n          count++\n        }\n\n        subGridData.push(subGridRow)\n      }\n\n      gridRow.push(subGridData)\n    }\n\n    gridData.push(gridRow)\n  }\n\n  return gridData\n}\n\nexport const generateCoordinatesOrder = gridSize => {\n  const coordinatesOrder = []\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      coordinatesOrder.push({\n        x: gridX,\n        y: gridY\n      })\n    }\n  }\n\n  return shuffleArray(coordinatesOrder)\n}\n\nexport const jimpToSerializedGridData = (jimpFile, gridSize, subGridSize) => {\n  let serializedGridData = ''\n  const { width, height } = jimpFile.bitmap\n  const gridWidthAndHeight = gridSize * subGridSize\n\n  if (gridWidthAndHeight !== width || gridWidthAndHeight !== height) {\n    // This should never be thrown.\n    throw new Error('Invalid image size.')\n  }\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n        for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n          const x = gridX * subGridSize + subGridX\n          const y = gridY * subGridSize + subGridY\n          const { r, g, b, a } = Jimp.intToRGBA(jimpFile.getPixelColor(x, y))\n          const rgb = r + g + b\n          const value = (rgb >= ((255 + 255 + 255) / 2) || a === 0) ? '0' : '1'\n          serializedGridData += value\n        }\n      }\n    }\n  }\n\n  return serializedGridData\n}\n\nexport const gridDataToJimp = (gridData, filledColor, emptyColor) => {\n  const serializedGridData = serializeGridData(gridData)\n  const gridSize = gridData.length\n  const subGridSize = gridData[0][0].length\n  const gridWidthAndHeight = gridSize * subGridSize\n\n  const jimpFile = new Jimp(gridWidthAndHeight, gridWidthAndHeight)\n  let count = 0\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n        for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n          const x = gridX * subGridSize + subGridX\n          const y = gridY * subGridSize + subGridY\n          const { r, g, b } = Jimp.intToRGBA((serializedGridData[count] === '1') ? filledColor : emptyColor)\n\n          jimpFile.setPixelColor(Jimp.rgbaToInt(r, g, b, 255), x, y)\n\n          count++\n        }\n      }\n    }\n  }\n\n  return jimpFile\n}\n\nexport const getXLabelValues = (x, game, gridData, gridSize) => {\n  if (!game || game === 'classic') {\n    return ['ABCDEFGHIJK'[x]]\n  } else if (game === 'nonogram') {\n    const labelValues = []\n    let continuousCells = 0\n\n    for (let gridY = 0; gridY < gridSize; gridY++) {\n      if (gridData[gridY][x][0][0]) {\n        continuousCells++\n      } else {\n        if (continuousCells) {\n          labelValues.push(continuousCells)\n        }\n\n        continuousCells = 0\n      }\n    }\n\n    if (continuousCells !== 0) {\n      labelValues.push(continuousCells)\n    } else if (labelValues.length === 0) {\n      labelValues.push(0)\n    }\n\n    return labelValues\n  }\n}\n\nexport const getYLabel = (y, game, gridData, gridSize) => {\n  if (!game || game === 'classic') {\n    return y + 1\n  } else if (game === 'nonogram') {\n    const labelValues = []\n    let continuousCells = 0\n\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      if (gridData[y][gridX][0][0]) {\n        continuousCells++\n      } else {\n        if (continuousCells) {\n          labelValues.push(continuousCells)\n        }\n\n        continuousCells = 0\n      }\n    }\n\n    if (continuousCells !== 0) {\n      labelValues.push(continuousCells)\n    } else if (labelValues.length === 0) {\n      labelValues.push(0)\n    }\n\n    return labelValues.join(' ')\n  }\n}\n\nexport const decimalToHex = dec => `#${dec.toString(16).toUpperCase().padStart(6, '0')}`\nexport const getCoordinateLabel = (x, y) => getXLabelValues(x)[0] + getYLabel(y)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport X from '../images/x.svg'\nimport { decimalToHex } from '../lib/util'\n\nconst Cell = props => {\n  const [crossedOut, setCrossedOut] = React.useState({\n    isCrossedOut: false\n  })\n\n  const {\n    onCellEdit, onCellChanged, game, isPrinting, gridSize, subGridSize,\n    filledColor, emptyColor, gridY, gridX, subGridY, subGridX, isFilled\n  } = props\n\n  let scale\n  let minimumWidthAndHeight\n\n  if (game === 'classic') {\n    scale = isPrinting ? 50 : 40\n    minimumWidthAndHeight = '6px'\n  } else if (game === 'nonogram') {\n    scale = 75\n    minimumWidthAndHeight = '40px'\n  }\n\n  const widthAndHeight = (game === 'classic' || isPrinting)\n    ? `max(${scale / (gridSize * subGridSize)}vw, ${minimumWidthAndHeight})`\n    : minimumWidthAndHeight\n\n  return (\n    <td\n      className=\"cell\"\n\n      style={{\n        backgroundColor: crossedOut.isCrossedOut ? undefined : decimalToHex((isFilled) ? filledColor : emptyColor),\n        backgroundImage: crossedOut.isCrossedOut ? `url(${X})` : undefined,\n        minWidth: widthAndHeight,\n        minHeight: widthAndHeight,\n        width: widthAndHeight,\n        height: widthAndHeight\n      }}\n\n      onPointerDown={(e) => {\n        // Ignore right-click.\n        if (e.button === 2) {\n          return\n        }\n\n        const { isFilled } = props\n\n        if (onCellEdit) {\n          onCellEdit(isFilled)\n        }\n\n        if (onCellChanged) {\n          onCellChanged(gridY, gridX, subGridY, subGridX, !isFilled)\n        }\n\n        setCrossedOut({ isCrossedOut: false })\n      }}\n\n      // Right-click\n      onContextMenu={(e) => {\n        e.preventDefault()\n\n        const { onCrossOut } = props\n\n        if (game !== 'nonogram' || props.isAuthoring || !onCrossOut) {\n          return\n        }\n\n        const isCrossingOut = !crossedOut.isCrossedOut\n\n        onCrossOut(isCrossingOut)\n        setCrossedOut({ isCrossedOut: isCrossingOut })\n        onCellChanged(gridY, gridX, subGridY, subGridX, false)\n      }}\n\n      onMouseEnter={e => {\n        const { isAuthoring, isFilling, isCrossingOut } = props\n\n        if (onCellChanged && e.buttons === undefined ? e.which === 1 : e.buttons === 1) {\n          onCellChanged(gridY, gridX, subGridY, subGridX, isFilling)\n\n          if (isFilling) {\n            setCrossedOut({ isCrossedOut: false })\n          }\n        } else if (game === 'nonogram' && e.buttons === 2 && !isAuthoring) {\n          setCrossedOut({ isCrossedOut: isCrossingOut })\n          onCellChanged(gridY, gridX, subGridY, subGridX, false)\n        }\n      }}\n    >\n    </td>\n  )\n}\n\nCell.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  onCrossOut: PropTypes.func,\n  game: PropTypes.string.isRequired,\n  isAuthoring: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isCrossingOut: PropTypes.bool,\n  isPrinting: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  gridY: PropTypes.number.isRequired,\n  gridX: PropTypes.number.isRequired,\n  subGridY: PropTypes.number.isRequired,\n  subGridX: PropTypes.number.isRequired,\n  isFilled: PropTypes.number.isRequired\n}\n\nexport default Cell\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Cell from './Cell'\nimport { decimalToHex } from '../lib/util'\n\nclass SubGrid extends React.Component {\n  constructor (props) {\n    super()\n    const { isAuthoring, isCoordinate, isRevealing, subGridSize } = props\n    const { initialSubGridData } = props\n\n    const subGridData = []\n    const subGridFilling = []\n\n    for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n      const subGridDataRow = []\n      const subGridFillingRow = []\n\n      for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n        if (initialSubGridData) {\n          const initialValue = initialSubGridData[subGridY][subGridX]\n\n          subGridDataRow.push(initialValue)\n\n          if (isAuthoring || isCoordinate) {\n            subGridFillingRow.push(initialValue)\n          } else {\n            subGridFillingRow.push(0)\n          }\n        } else {\n          subGridDataRow.push(0)\n          subGridFillingRow.push(0)\n        }\n      }\n\n      subGridData.push(subGridDataRow)\n      subGridFilling.push(subGridFillingRow)\n    }\n\n    this.state = {\n      subGridData,\n      subGridFilling\n    }\n\n    if (isRevealing) {\n      setTimeout(() => {\n        this.setState({\n          subGridFilling: subGridData\n        })\n      }, Math.random() * 1000)\n    }\n\n    this.onCellChanged = this.onCellChanged.bind(this)\n    this.isSolved = this.isSolved.bind(this)\n  }\n\n  onCellChanged (gridY, gridX, subGridY, subGridX, value) {\n    const { onCellChanged, isAuthoring, isCoordinate } = this.props\n    const { subGridData, subGridFilling } = this.state\n\n    if (!isCoordinate && onCellChanged) {\n      if (isAuthoring) {\n        subGridData[subGridY][subGridX] = (value) ? 1 : 0\n        subGridFilling[subGridY][subGridX] = subGridData[subGridY][subGridX]\n        onCellChanged(gridY, gridX, subGridY, subGridX, value)\n      }\n\n      subGridFilling[subGridY][subGridX] = (value) ? 1 : 0\n    }\n\n    this.setState({\n      subGridData,\n      subGridFilling\n    })\n  }\n\n  isSolved () {\n    const { isAuthoring, isCoordinate } = this.props\n    const { subGridData, subGridFilling } = this.state\n    // TODO: Hide non-printed coordinates when solved. Show Toast notification when all sub-grids are solved.\n    return (!isAuthoring && !isCoordinate && JSON.stringify(subGridData) === JSON.stringify(subGridFilling))\n  }\n\n  render () {\n    const {\n      onCellEdit, onCrossOut, isCoordinate, game, isAuthoring, isFilling, isCrossingOut, isPrinting,\n      gridSize, subGridSize, filledColor, emptyColor, solvedColor, unsolvedColor,\n      gridY, gridX\n    } = this.props\n    const { subGridFilling } = this.state\n\n    return (\n      <td\n        className=\"subGrid\"\n        style={{\n          border: (game === 'classic') ? `1px solid ${decimalToHex(this.isSolved() ? solvedColor : unsolvedColor)}` : undefined,\n          minWidth: '32px',\n          minHeight: '32px',\n          touchAction: (isCoordinate) ? 'auto' : 'none'\n        }}\n      >\n        <table>\n          <tbody>\n            {subGridFilling.map((subGridFillingRow, rowIndex) => (\n              <tr key={rowIndex}>\n                {subGridFillingRow.map((isFilled, colIndex) => (\n                  <Cell\n                    key={colIndex}\n                    onCellEdit={onCellEdit}\n                    onCellChanged={this.onCellChanged}\n                    onCrossOut={onCrossOut}\n                    game={game}\n                    isAuthoring={isAuthoring}\n                    isFilling={isFilling}\n                    isCrossingOut={isCrossingOut}\n                    isPrinting={isPrinting}\n                    gridSize={gridSize}\n                    subGridSize={subGridSize}\n                    filledColor={filledColor}\n                    emptyColor={emptyColor}\n                    gridY={gridY}\n                    gridX={gridX}\n                    subGridY={rowIndex}\n                    subGridX={colIndex}\n                    isFilled={isFilled}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </td>\n    )\n  }\n}\n\nSubGrid.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  onCrossOut: PropTypes.func,\n  game: PropTypes.string.isRequired,\n  isAuthoring: PropTypes.bool,\n  isCoordinate: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isCrossingOut: PropTypes.bool,\n  isRevealing: PropTypes.bool,\n  isPrinting: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridY: PropTypes.number.isRequired,\n  gridX: PropTypes.number.isRequired,\n  initialSubGridData: PropTypes.array\n}\n\nexport default SubGrid\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SubGrid from './SubGrid'\nimport { getXLabelValues, getYLabel } from '../lib/util'\n\nconst Grid = props => {\n  const {\n    onCellEdit, onCellChanged, onCrossOut, game, isAuthoring, isFilling, isCrossingOut, isRevealing,\n    isPrinting, gridSize, subGridSize, filledColor, emptyColor, solvedColor, unsolvedColor, gridData,\n    noFloat\n  } = props\n\n  return (\n    <div\n      className=\"grid\"\n      style={{\n        float: (game === 'classic' && !noFloat) ? 'left' : undefined,\n        paddingRight: (game === 'classic') ? '20px' : undefined\n      }}\n    >\n      <table\n        style={{\n          margin: (game === 'nonogram') ? 'auto' : undefined\n        }}\n      >\n        <tbody>\n          {(game === 'classic' || !isAuthoring) && (\n            <tr>\n              <td></td>\n\n              {Array(gridSize).fill().map((_, colIndex) => (\n                  <td\n                    key={colIndex}\n\n                    style={{\n                      verticalAlign: 'bottom',\n                      paddingDown: '5px'\n                    }}\n                  >\n                    {getXLabelValues(colIndex, game, gridData, gridSize).map((value, valueIndex) => (\n                      <span key={valueIndex}>{value}<br /></span>\n                    ))}\n                  </td>\n              ))}\n            </tr>\n          )}\n\n          {Array(gridSize).fill().map((_, rowIndex) => (\n            <tr key={rowIndex}>\n              {(game === 'classic' || !isAuthoring) && (\n                <td\n                  style={{\n                    minWidth: (game === 'nonogram') ? '120px' : undefined,\n                    textAlign: 'right',\n                    paddingRight: '5px'\n                  }}\n                >\n                  {getYLabel(rowIndex, game, gridData, gridSize)}\n                </td>\n              )}\n\n              {Array(gridSize).fill().map((_, colIndex) => (\n                <SubGrid\n                  key={colIndex}\n                  onCellEdit={onCellEdit}\n                  onCellChanged={onCellChanged}\n                  onCrossOut={onCrossOut}\n                  game={game}\n                  isAuthoring={isAuthoring}\n                  isFilling={isFilling}\n                  isCrossingOut={isCrossingOut}\n                  isRevealing={isRevealing}\n                  isPrinting={isPrinting}\n                  gridSize={gridSize}\n                  subGridSize={subGridSize}\n                  filledColor={filledColor}\n                  emptyColor={emptyColor}\n                  solvedColor={solvedColor}\n                  unsolvedColor={unsolvedColor}\n                  gridY={rowIndex}\n                  gridX={colIndex}\n                  initialSubGridData={gridData[rowIndex][colIndex]}\n                />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {!isAuthoring && game === 'nonogram' && (\n        <>\n          <p style={{ textAlign: 'center' }}><strong>Grid size: {gridSize}x{gridSize}</strong></p>\n        </>\n      )}\n    </div>\n  )\n}\n\nGrid.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  onCrossOut: PropTypes.func,\n  game: PropTypes.string,\n  isAuthoring: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isCrossingOut: PropTypes.bool,\n  isRevealing: PropTypes.bool,\n  isPrinting: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired,\n  noFloat: PropTypes.bool\n}\n\nexport default Grid\n","import React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport PropTypes from 'prop-types'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error) {\n    this.setState({ hasError: true })\n    this.props.onError(error)\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return (\n        <>\n          <h1>Something went wrong.</h1>\n          <Button variant=\"primary\" type=\"submit\" onClick={() => window.location.reload(false)}>Reload application</Button>\n        </>\n      )\n    }\n\n    return this.props.children\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ]).isRequired,\n  onError: PropTypes.func.isRequired\n}\n\nexport default ErrorBoundary\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Header = props => (\n  <>\n    {props.game === 'classic' && (\n      <>\n        <h1>Pixel Puzzles - Classic</h1>\n        <h4>Copy each square&apos;s pattern to the associated coordinates to reveal a secret image!</h4>\n      </>\n    )}\n\n    {props.game === 'nonogram' && (\n      <>\n        <h1>Pixel Puzzles - Nonogram</h1>\n        <h4>\n          Solve the {props.isPrinting && <>Nonogram</>} {!props.isPrinting && <a href=\"https://en.wikipedia.org/wiki/Nonogram\">Nonogram</a>} to reveal a secret image!&nbsp;\n\n          {!props.isPrinting && (\n            <a href=\"https://www.youtube.com/watch?v=zisu0Qf4TAI\">Nonogram Tutorial</a>\n          )}\n        </h4>\n      </>\n    )}\n\n    <h6>Fill the grid in your browser or print the puzzle to complete by hand. Edit the puzzle or generate your own using any image. Share puzzles with your friends and family! {props.isPrinting && <>https://brandone.github.io/pixel-puzzles/</>}</h6>\n\n    {!props.isPrinting && (\n      <>\n        {props.changeGame && props.game === 'classic' && (\n          <>\n            <h6><strong>Left-click to fill or unfill a cell</strong></h6>\n            <br />\n            <h4>\n              <a href=\"\" onClick={e => {\n                e.preventDefault()\n                props.changeGame('nonogram')\n              }}>Switch to Nonogram mode</a>\n            </h4>\n          </>\n        )}\n\n        {props.changeGame && props.game === 'nonogram' && (\n          <>\n            <h6><strong>Left-click to fill or unfill a cell. Right-click to cross out or uncross out a cell</strong></h6>\n            <br />\n            <h4>\n              <a href=\"\" onClick={e => {\n                e.preventDefault()\n                props.changeGame('classic')\n              }}>Switch to Classic mode</a>\n            </h4>\n          </>\n        )}\n      </>\n    )}\n  </>\n)\n\nHeader.propTypes = {\n  changeGame: PropTypes.func,\n  game: PropTypes.string.isRequired,\n  isPrinting: PropTypes.bool\n}\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SubGrid from './SubGrid'\nimport { getCoordinateLabel } from '../lib/util'\n\nconst Coordinates = props => {\n  const {\n    gridSize, subGridSize, filledColor, emptyColor,\n    solvedColor, unsolvedColor, gridData, coordinatesOrder\n  } = props\n\n  return (\n    coordinatesOrder.map((coordinates, index) => {\n      const { x, y } = coordinates\n\n      return (\n        <table className=\"coordinates\" key={index}>\n          <tbody>\n            <tr>\n              <td>{getCoordinateLabel(x, y)}</td>\n            </tr>\n            <tr>\n              <SubGrid\n                game=\"classic\"\n                isCoordinate={true}\n                gridSize={gridSize}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={solvedColor}\n                unsolvedColor={unsolvedColor}\n                gridY={y}\n                gridX={x}\n                initialSubGridData={gridData[y][x]}\n              />\n            </tr>\n          </tbody>\n        </table>\n      )\n    })\n  )\n}\n\nCoordinates.propTypes = {\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Coordinates\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Grid from './Grid'\nimport Coordinates from './Coordinates'\n\nclass Main extends React.Component {\n  render () {\n    const {\n      onCellEdit, onCellChanged, onCrossOut, game, isAuthoring, isFilling, isCrossingOut,\n      gridSize, subGridSize, filledColor, emptyColor, solvedColor, unsolvedColor,\n      gridData, coordinatesOrder\n    } = this.props\n\n    return (\n      <div>\n        <Grid\n          onCellEdit={onCellEdit}\n          onCellChanged={onCellChanged}\n          onCrossOut={onCrossOut}\n          game={game}\n          isAuthoring={isAuthoring}\n          isFilling={isFilling}\n          isCrossingOut={isCrossingOut}\n          gridSize={gridSize}\n          subGridSize={subGridSize}\n          filledColor={filledColor}\n          emptyColor={emptyColor}\n          solvedColor={solvedColor}\n          unsolvedColor={unsolvedColor}\n          gridData={gridData}\n        />\n\n        {!isAuthoring && game === 'classic' && (\n          <Coordinates\n            gridSize={gridSize}\n            subGridSize={subGridSize}\n            filledColor={filledColor}\n            emptyColor={emptyColor}\n            solvedColor={solvedColor}\n            unsolvedColor={unsolvedColor}\n            gridData={gridData}\n            coordinatesOrder={coordinatesOrder}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nMain.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  onCrossOut: PropTypes.func,\n  game: PropTypes.string.isRequired,\n  isAuthoring: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isCrossingOut: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Main\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Row, Col, Button, Form, Dropdown, DropdownButton } from 'react-bootstrap'\n\nconst Buttons = props => {\n  const {\n    game, changeMode, clear, revealSolution, invert, importImage, exportImage,\n    share, resizeGrids, print, isAuthoring, isReadOnly,\n    gridSizeMin, gridSizeMax, subGridSizeMin, subGridSizeMax,\n    nonogramGridSizeMin, nonogramGridSizeMax, gridData\n  } = props\n\n  const gridSize = gridData.length\n  const subGridSize = gridData[0][0].length\n\n  return (\n    <>\n      {isAuthoring && (\n        <>\n          <Row>\n            <Col>\n              <DropdownButton title=\"Resize Grid\">\n                {Array((game === 'classic') ? gridSizeMax : nonogramGridSizeMax).fill(0).map((_, i) => i + 1).filter(\n                  size => size >= ((game === 'classic') ? gridSizeMin : nonogramGridSizeMin) && size !== gridSize\n                ).map(size => (\n                  <Dropdown.Item\n                    key={size}\n                    onSelect={() => resizeGrids(size, subGridSize)}\n                  >\n                    {size}x{size}\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n\n              {game === 'classic' && (\n                <DropdownButton title=\"Resize Sub-Grid\">\n                { /* Sizes allowed are 2-9 */ }\n                {Array(subGridSizeMax).fill(0).map((_, i) => i + 1).filter(\n                  size => size >= subGridSizeMin && size !== subGridSize\n                ).map(size => (\n                  <Dropdown.Item\n                    key={size}\n                    onSelect={() => resizeGrids(gridSize, size)}\n                  >\n                    {size}x{size}\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n              )}\n              <Button onClick={invert}>Invert</Button>\n            </Col>\n          </Row>\n\n          <Row>\n            <Form.Label>Import from Image</Form.Label>\n            <Form.Control\n              type=\"file\" name=\"files\"\n              accept=\".bmp, .gif, .jpg, .jpeg, .png, .tiff\"\n              onChange={importImage}\n            />\n          </Row>\n\n          <Row>\n            <Col>\n              <Button onClick={exportImage}>Export as Image</Button>\n            </Col>\n          </Row>\n        </>\n      )}\n\n      {!isAuthoring && !isReadOnly && (\n        <Row>\n          <Col>\n            <Form.Group className=\"mb-3\">\n              <Button variant=\"warning\" onClick={revealSolution}>Reveal Solution</Button>\n            </Form.Group>\n          </Col>\n        </Row>\n      )}\n\n      {!isReadOnly && (\n        <Row>\n          <Col>\n            <Button variant=\"danger\" onClick={clear}>Clear</Button>\n            <Button variant=\"danger\" onClick={changeMode}>{(isAuthoring) ? 'Play' : 'Edit'}</Button>\n          </Col>\n        </Row>\n      )}\n\n      <Row>\n        <Col>\n          <Button onClick={print}>Print</Button>\n          <Button onClick={share}>Share</Button>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nButtons.propTypes = {\n  game: PropTypes.string.isRequired,\n  changeMode: PropTypes.func.isRequired,\n  clear: PropTypes.func.isRequired,\n  revealSolution: PropTypes.func.isRequired,\n  invert: PropTypes.func.isRequired,\n  importImage: PropTypes.func.isRequired,\n  exportImage: PropTypes.func.isRequired,\n  share: PropTypes.func.isRequired,\n  resizeGrids: PropTypes.func.isRequired,\n  print: PropTypes.func.isRequired,\n  isAuthoring: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  gridSizeMin: PropTypes.number.isRequired,\n  gridSizeMax: PropTypes.number.isRequired,\n  subGridSizeMin: PropTypes.number.isRequired,\n  subGridSizeMax: PropTypes.number.isRequired,\n  nonogramGridSizeMin: PropTypes.number.isRequired,\n  nonogramGridSizeMax: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired\n}\n\nexport default Buttons\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Row, Col } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n\nconst Footer = props => (\n  <Row className=\"footer\">\n    <Col>\n      Created by <a href=\"https://github.com/BrandonE\" target=\"_blank\" rel=\"noreferrer\">Brandon Evans</a>\n\n      {props.game === 'classic' && (\n        <>\n          .&nbsp;Inspired by <a href=\"https://web.archive.org/web/20111027002447/http://www.tipstricks.com/puzzles.html\" target=\"_blank\" rel=\"noreferrer\">Pencil Puzzles</a> from <a href=\"https://en.wikipedia.org/wiki/Tips_%26_Tricks_(magazine)\">Tips &amp; Tricks Magazine</a>\n        </>\n      )}\n\n      &nbsp; <a href=\"https://github.com/BrandonE/pixel-puzzles\" target=\"_blank\" rel=\"noreferrer\"><FontAwesomeIcon icon={faGithub}></FontAwesomeIcon></a>\n    </Col>\n  </Row>\n)\n\nFooter.propTypes = {\n  game: PropTypes.string.isRequired\n}\n\nexport default Footer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Form } from 'react-bootstrap'\nimport ReactCrop from 'react-image-crop'\nimport { SpinnerComponent } from 'react-element-spinner'\nimport ScrollArea from 'react-scrollbar'\nimport 'react-image-crop/dist/ReactCrop.css'\n\nclass Crop extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      isCropping: true,\n      crop: {}\n    }\n\n    this.cropComponentRef = React.createRef()\n\n    this.onImageLoaded = this.onImageLoaded.bind(this)\n    this.getCroppedImg = this.getCroppedImg.bind(this)\n    this.onCropComplete = this.onCropComplete.bind(this)\n    this.onCropChange = this.onCropChange.bind(this)\n    this.onAspectChange = this.onAspectChange.bind(this)\n  }\n\n  componentDidMount () {\n    this.onAspectChange(true)\n  }\n\n  onImageLoaded (image) {\n    this.imageRef = image\n  }\n\n  async getCroppedImg (image, crop, fileName) {\n    const canvas = document.createElement('canvas')\n    const pixelRatio = window.devicePixelRatio\n    const scaleX = image.naturalWidth / image.width\n    const scaleY = image.naturalHeight / image.height\n    const ctx = canvas.getContext('2d')\n\n    canvas.width = crop.width * pixelRatio * scaleX\n    canvas.height = crop.height * pixelRatio * scaleY\n\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0)\n    ctx.imageSmoothingQuality = 'high'\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width * scaleX,\n      crop.height * scaleY\n    )\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        (blob) => {\n          if (!blob) {\n            reject(new Error('Canvas is empty'))\n            return\n          }\n\n          blob.name = fileName\n          window.URL.revokeObjectURL(this.fileUrl)\n          this.fileUrl = window.URL.createObjectURL(blob)\n          resolve(this.fileUrl)\n        },\n        'image/png'\n      )\n    })\n  }\n\n  async onCropComplete (crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      this.setState({\n        isCropping: true\n      })\n\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        'newFile.png'\n      )\n\n      this.props.onCropProcessed(croppedImageUrl)\n\n      this.setState({\n        isCropping: false\n      })\n    }\n  }\n\n  onCropChange (crop, percentCrop) {\n    this.setState({ crop: percentCrop })\n  }\n\n  onAspectChange (isInitializing) {\n    const { width, height } = this.props\n    const { crop } = this.state\n    const isSquare = !crop.aspect\n    let widthPercentage, heightPercentage\n\n    if (isSquare) {\n      if (width < height) {\n        widthPercentage = 100\n        heightPercentage = width / height * 100\n      } else {\n        heightPercentage = 100\n        widthPercentage = height / width * 100\n      }\n    } else {\n      widthPercentage = 100\n      heightPercentage = 100\n    }\n\n    this.setState({\n      crop: {\n        unit: '%',\n        width: widthPercentage,\n        height: heightPercentage,\n        x: 0,\n        y: 0,\n        aspect: (isSquare) ? 1 : undefined\n      }\n    }, () => {\n      if (!isInitializing) {\n        this.cropComponentRef.current.onMediaLoaded()\n      }\n    })\n  }\n\n  render () {\n    const { imageSrc } = this.props\n    const { isCropping, crop } = this.state\n\n    return (\n      <div>\n        <SpinnerComponent loading={isCropping} position=\"global\" />\n\n        <ScrollArea>\n          <ReactCrop\n            src={imageSrc}\n            crop={crop}\n            ruleOfThirds\n            onImageLoaded={this.onImageLoaded}\n            onComplete={this.onCropComplete}\n            onChange={this.onCropChange}\n            ref={this.cropComponentRef}\n          />\n        </ScrollArea>\n\n        <Form>\n          <Form.Group controlId=\"formBasicCheckbox\">\n            <Form.Check\n              type=\"checkbox\" label=\"Square Aspect Ratio (1:1)\"\n              checked={!!crop.aspect} onChange={() => this.onAspectChange()}\n            />\n          </Form.Group>\n        </Form>\n      </div>\n    )\n  }\n}\n\nCrop.propTypes = {\n  imageSrc: PropTypes.string.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  onCropProcessed: PropTypes.func.isRequired\n}\n\nexport default Crop\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Header from './Header'\nimport Grid from './Grid'\nimport Coordinates from './Coordinates'\nimport Footer from './Footer'\n\nclass Print extends React.Component {\n  render () {\n    const {\n      game, gridSize, subGridSize, filledColor, emptyColor,\n      // Don't indicate which boxes are empty to begin with; always use unsolved color.\n      unsolvedColor, gridData, coordinatesOrder\n    } = this.props\n\n    if (!gridData) {\n      return <></>\n    }\n\n    return (\n      <div className=\"print\">\n        <Header\n          game={game}\n          isPrinting={true}\n        />\n\n        {gridData && (\n          <>\n            <Grid\n              game={game}\n              isPrinting={true}\n              gridSize={gridSize}\n              subGridSize={subGridSize}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={unsolvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={gridData}\n            />\n\n            {game === 'classic' && (\n              <Coordinates\n                gridSize={gridSize}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={unsolvedColor}\n                unsolvedColor={unsolvedColor}\n                gridData={gridData}\n                coordinatesOrder={coordinatesOrder}\n              />\n            )}\n          </>\n        )}\n\n        <Footer game={game} />\n      </div>\n    )\n  }\n}\n\nPrint.propTypes = {\n  game: PropTypes.string.isRequired,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Print\n","import React from 'react'\nimport Grid from './components/Grid'\nimport { Form, Button } from 'react-bootstrap'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast, ToastContainer } from 'react-toastify'\nimport { SpinnerComponent } from 'react-element-spinner'\nimport ReactToPrint from 'react-to-print'\nimport Jimp from 'jimp/es'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './App.css'\nimport ErrorBoundary from './components/ErrorBoundary'\nimport Header from './components/Header'\nimport Main from './components/Main'\nimport Buttons from './components/Buttons'\nimport Footer from './components/Footer'\nimport Crop from './components/Crop'\nimport {\n  generateGrid, generateCoordinatesOrder, serializeGridData,\n  binaryStringToHexStringWithLeftovers, hexStringWithLeftoversToBinaryString,\n  jimpToSerializedGridData, gridDataToJimp\n} from './lib/util'\nimport Print from './components/Print'\n\nconst inputGridDataGitHub30x30 = '000000000019C27FFFFFFFFFFFFFFFFC39FFFC000638000000000231BFFFFFBFFFFC7FFFFFFFFFFFFFFFFFE3DFFFDE00431839DEF7FBDEF782000018000001800004000001EF7BDFCE7BDEFFFFFFFB9CE700000000000000000000000001E739CFFFFFFFFFFFFFF39CE700000000000000000000000000E739CFFFFFFFFBDEF3FBFFFDC00873E00001000000080013FDFFFFFFFF7BDC38C6106FBDF7FFFFB410800000840007FFFFFFFFFFFFCC62000000003CE3003FFFFCE0000000000007FFFFF3DCC000000000'\nconst inputGridDataGitHub15x15 = '07C03FE0FFE33E6600FC01F803F003E00FC01FC07AE3E207C30F0308_0'\n\nconst gridSizeMin = 2\nconst gridSizeMax = 9\nconst subGridSizeMin = 2\nconst subGridSizeMax = 9\n\nconst nonogramGridSizeMin = 5\nconst nonogramGridSizeMax = 20\n\nconst defaultGridSize = 8\nconst defaultSubGridSize = 5\nconst defaultNonogramGridSize = 15\n\nconst filledColor = 0x00000000\nconst emptyColor = 0xFFFFFFFF\nconst solvedColor = 0xFFFF00FF\nconst unsolvedColor = 0x808080FF\n\nconst preventUnload = e => {\n  // Cancel the event\n  e.preventDefault() // If you prevent default behavior in Mozilla Firefox prompt will always be shown\n  // Chrome requires returnValue to be set\n  e.returnValue = ''\n}\n\nclass App extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      game: 'classic',\n      isAuthoring: false,\n      isReadOnly: false,\n      // TODO: Move this down to Grid to avoid re-rendering coordinates and make things faster.\n      isFilling: false,\n      isCrossingOut: false,\n      isLoading: false\n    }\n\n    this.printableRef = React.createRef()\n\n    this.initializeGrid = this.initializeGrid.bind(this)\n    this.onCellEdit = this.onCellEdit.bind(this)\n    this.onCellChanged = this.onCellChanged.bind(this)\n    this.onCrossOut = this.onCrossOut.bind(this)\n    this.changeGame = this.changeGame.bind(this)\n    this.confirmChangeGame = this.confirmChangeGame.bind(this)\n    this.changeMode = this.changeMode.bind(this)\n    this.confirmChangeMode = this.confirmChangeMode.bind(this)\n    this.clear = this.clear.bind(this)\n    this.revealSolution = this.revealSolution.bind(this)\n    this.invert = this.invert.bind(this)\n    this.onCropProcessed = this.onCropProcessed.bind(this)\n    this.importImage = this.importImage.bind(this)\n    this.confirmImportImage = this.confirmImportImage.bind(this)\n    this.exportImage = this.exportImage.bind(this)\n    this.share = this.share.bind(this)\n    this.resizeGrids = this.resizeGrids.bind(this)\n    this.print = this.print.bind(this)\n  }\n\n  componentDidMount () {\n    const searchParams = new URLSearchParams(window.location.search)\n    const query = Object.fromEntries(searchParams.entries())\n\n    const game = (['classic', 'nonogram'].includes(query.game)) ? query.game : 'classic'\n\n    let gridSize = parseInt(query.gridSize, 10)\n    let subGridSize = parseInt(query.subGridSize, 10)\n\n    if (game === 'classic') {\n      if (!gridSize || gridSize < gridSizeMin || gridSize > gridSizeMax) {\n        gridSize = defaultGridSize\n      }\n\n      if (!subGridSize || subGridSize < subGridSizeMin || subGridSize > subGridSizeMax) {\n        subGridSize = defaultSubGridSize\n      }\n    } else if (game === 'nonogram') {\n      if (!gridSize || gridSize < nonogramGridSizeMin || gridSize > nonogramGridSizeMax) {\n        gridSize = defaultNonogramGridSize\n      }\n\n      subGridSize = 1\n    }\n\n    document.onselectstart = () => false\n\n    window.addEventListener('beforeunload', preventUnload)\n\n    const { gridData } = query\n\n    this.initializeGrid(game, gridSize, subGridSize, gridData)\n\n    const isAuthoring = (query.isAuthoring === 'true')\n\n    this.setState({\n      game,\n      isAuthoring,\n      isReadOnly: (query.isReadOnly === 'true') && !isAuthoring,\n      gridSize,\n      subGridSize\n    })\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('beforeunload', preventUnload)\n  }\n\n  navigate (searchParams) {\n    window.removeEventListener('beforeunload', preventUnload)\n    window.location.search = searchParams.toString()\n  }\n\n  initializeGrid (game, gridSize, subGridSize, inputGridData) {\n    if (!inputGridData && game === 'classic' && gridSize === defaultGridSize && subGridSize === defaultSubGridSize) {\n      inputGridData = inputGridDataGitHub30x30\n    }\n\n    if (!inputGridData && game === 'nonogram' && gridSize === defaultNonogramGridSize) {\n      inputGridData = inputGridDataGitHub15x15\n    }\n\n    const serializedGridData = (inputGridData.length === Math.pow(gridSize * subGridSize, 2))\n      ? inputGridData\n      : hexStringWithLeftoversToBinaryString(inputGridData)\n\n    this.gridData = generateGrid(gridSize, subGridSize, serializedGridData)\n    this.coordinatesOrder = generateCoordinatesOrder(gridSize)\n  }\n\n  onCellEdit (filled) {\n    this.setState({\n      isFilling: !filled\n    })\n  }\n\n  onCellChanged (gridY, gridX, subGridY, subGridX, value) {\n    this.gridData[gridY][gridX][subGridY][subGridX] = (value) ? 1 : 0\n  }\n\n  onCrossOut (crossed) {\n    this.setState({\n      isCrossingOut: crossed\n    })\n  }\n\n  changeGame (game) {\n    const { isAuthoring } = this.state\n\n    confirmAlert({\n      title: 'Confirmation',\n      message: `Are you sure you want to change the game mode? ${(isAuthoring) ? 'This will clear the canvas and cannot be undone.' : 'This will undo your progress.'}`,\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => this.confirmChangeGame(game)\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  confirmChangeGame (game) {\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('game', game)\n    searchParams.delete('gridData')\n    searchParams.delete('gridSize')\n    searchParams.delete('subGridSize')\n    searchParams.delete('isReadOnly')\n    this.navigate(searchParams)\n  }\n\n  changeMode () {\n    const { isAuthoring } = this.state\n\n    if (isAuthoring) {\n      this.confirmChangeMode()\n    } else {\n      confirmAlert({\n        title: 'Confirmation',\n        message: 'Are you sure you want to edit the puzzle? This will undo your progress and reveal the solution!',\n        buttons: [\n          {\n            label: 'Yes',\n            onClick: this.confirmChangeMode\n          },\n          {\n            label: 'No'\n          }\n        ]\n      })\n    }\n  }\n\n  confirmChangeMode () {\n    const { isAuthoring } = this.state\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', binaryStringToHexStringWithLeftovers(serializeGridData(this.gridData)))\n    searchParams.set('isAuthoring', JSON.stringify(!isAuthoring))\n    searchParams.delete('isReadOnly')\n    this.navigate(searchParams)\n  }\n\n  clear () {\n    const { isAuthoring } = this.state\n\n    confirmAlert({\n      title: 'Confirmation',\n      message: `Are you sure you want to clear ${isAuthoring ? 'the canvas' : 'your progress'}? This cannot be undone.`,\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            const searchParams = new URLSearchParams(window.location.search)\n\n            if (isAuthoring) {\n              // Clear the canvas.\n              searchParams.set('gridData', '0')\n            } else {\n              // Clear your progress, not the grid data (actual puzzle contents).\n              searchParams.set('gridData', binaryStringToHexStringWithLeftovers(serializeGridData(this.gridData)))\n            }\n\n            searchParams.set('isAuthoring', JSON.stringify(isAuthoring))\n            this.navigate(searchParams)\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  revealSolution () {\n    confirmAlert({\n      title: 'Confirmation',\n      message: 'Are you sure you want to reveal the solution? This spoils the fun!',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            setTimeout(() => {\n              confirmAlert({\n                title: 'Solution',\n                childrenElement: () => {\n                  const { game, gridSize, subGridSize } = this.state\n\n                  if (!this.gridData) {\n                    return <></>\n                  }\n\n                  return (\n                    <Grid\n                      game={game}\n                      isRevealing={true}\n                      isFilling={false}\n                      isCrossingOut={false}\n                      gridSize={gridSize}\n                      subGridSize={subGridSize}\n                      filledColor={filledColor}\n                      emptyColor={emptyColor}\n                      solvedColor={solvedColor}\n                      unsolvedColor={unsolvedColor}\n                      gridData={this.gridData}\n                      noFloat={true}\n                    />\n                  )\n                },\n                buttons: [\n                  {\n                    label: 'Continue'\n                  }\n                ]\n              })\n            }, 0) // Required to make sure the first alert is dismissed before the next is revealed.\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  invert () {\n    const serializedGridData = serializeGridData(this.gridData)\n    let invertedSerializedGridData = ''\n\n    for (let i = 0; i < serializedGridData.length; i++) {\n      invertedSerializedGridData += (serializedGridData[i] === '1') ? '0' : '1'\n    }\n\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', binaryStringToHexStringWithLeftovers(invertedSerializedGridData))\n    this.navigate(searchParams)\n  }\n\n  onCropProcessed (croppedImageUrl) {\n    this.setState({ croppedImageUrl })\n  }\n\n  importImage (e) {\n    const file = e.target.files[0]\n    e.target.value = ''\n\n    this.setState({\n      isLoading: true\n    })\n\n    const reader = new FileReader()\n\n    reader.addEventListener('load', async () => {\n      const jimpFile = await Jimp.read(reader.result)\n      const { width, height } = jimpFile.bitmap\n\n      const importedImageSrc = await new Promise((resolve, reject) => {\n        // Converting to PNG ensures GIFs are processed properly.\n        jimpFile.getBase64(Jimp.MIME_PNG, (err, src) => {\n          if (err) {\n            reject(err)\n          } else {\n            resolve(src)\n          }\n        })\n      })\n\n      this.setState({\n        isLoading: false\n      })\n\n      confirmAlert({\n        title: 'Confirmation',\n        message: 'Are you sure you want to import this image? Your current canvas will be overwritten.',\n        childrenElement: () => <Crop\n          imageSrc={importedImageSrc}\n          width={width}\n          height={height}\n          onImageLoaded={this.onImageLoaded}\n          onCropProcessed={this.onCropProcessed}\n        />,\n        buttons: [\n          {\n            label: 'Import',\n            onClick: () => this.confirmImportImage()\n          },\n          {\n            label: 'Cancel'\n          }\n        ],\n        closeOnClickOutside: false\n      })\n    })\n\n    reader.readAsDataURL(file)\n  }\n\n  async confirmImportImage () {\n    const { croppedImageUrl } = this.state\n\n    this.setState({\n      isLoading: true\n    })\n\n    const jimpFile = await Jimp.read(croppedImageUrl)\n    const gridSize = this.gridData.length\n    const subGridSize = this.gridData[0][0].length\n    const gridWidthAndHeight = gridSize * subGridSize\n\n    const { width, height } = jimpFile.bitmap\n    const largerDimension = (width > height) ? width : height\n\n    jimpFile\n      .background(0xFFFFFFFF)\n      .contain(largerDimension, largerDimension)\n      .resize(gridWidthAndHeight, gridWidthAndHeight)\n\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', binaryStringToHexStringWithLeftovers(jimpToSerializedGridData(jimpFile, gridSize, subGridSize)))\n    this.navigate(searchParams)\n  }\n\n  async exportImage () {\n    const image = gridDataToJimp(this.gridData, filledColor, emptyColor)\n    const u8 = await image.getBufferAsync(Jimp.MIME_JPEG)\n\n    // https://medium.com/@koteswar.meesala/convert-array-buffer-to-base64-string-to-display-images-in-angular-7-4c443db242cd\n    const stringChar = u8.reduce((data, byte) => {\n      return data + String.fromCharCode(byte)\n    }, '')\n\n    const b64Encoded = btoa(stringChar)\n\n    confirmAlert({\n      title: 'Image',\n      childrenElement: () => {\n        return (\n          <>\n            Right-click and &quot;Save Image As&quot; to download the image.\n            <div><img src={`data:image/jpeg;base64, ${b64Encoded}`} /></div>\n          </>\n        )\n      },\n      buttons: [\n        {\n          label: 'Continue'\n        }\n      ]\n    })\n  }\n\n  share () {\n    const { protocol, host, pathname } = window.location\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('isAuthoring', 'false')\n    searchParams.delete('isReadOnly')\n    searchParams.set('gridData', binaryStringToHexStringWithLeftovers(serializeGridData(this.gridData)))\n    navigator.clipboard.writeText(`${protocol}//${host}${pathname}?${searchParams.toString()}`)\n    toast.success('URL copied to your clipboard!')\n  }\n\n  resizeGrids (gridSize, subGridSize) {\n    confirmAlert({\n      title: 'Confirmation',\n      message: 'Are you sure you want to resize? This will clear the canvas.',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            const searchParams = new URLSearchParams(window.location.search)\n            searchParams.set('gridSize', gridSize)\n            searchParams.set('subGridSize', subGridSize)\n            searchParams.set('gridData', '0')\n            this.navigate(searchParams)\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  print () {\n    this.setState({\n      gridDataToPrint: this.gridData\n    })\n\n    confirmAlert({\n      title: 'Print',\n      message: 'Click this button to print the puzzle. Works best on Google Chrome. ',\n      childrenElement: () => (\n        <ReactToPrint\n          trigger={() => (\n            <Button>Print</Button>\n          )}\n          content={() => this.printableRef.current}\n        />\n      ),\n      buttons: [\n        {\n          label: 'Cancel'\n        }\n      ]\n    })\n  }\n\n  render () {\n    const {\n      game, isAuthoring, isReadOnly, isFilling, isCrossingOut, gridSize, subGridSize,\n      isLoading, gridDataToPrint, hasError\n    } = this.state\n\n    if (hasError) {\n      <h1>An unexpected error has occurred. Please reload this page.</h1>\n    }\n\n    if (!this.gridData) {\n      return <></>\n    }\n\n    return (\n      <>\n        <ToastContainer />\n\n        <ErrorBoundary onError={err => toast.error(err.toString())}>\n          <div className=\"no-print\">\n            <SpinnerComponent loading={isLoading} position=\"global\" />\n\n            <Header\n              changeGame={this.changeGame}\n              game={game}\n            />\n\n            <Main\n              onCellEdit={this.onCellEdit}\n              onCellChanged={this.onCellChanged}\n              onCrossOut={this.onCrossOut}\n              game={game}\n              isAuthoring={isAuthoring}\n              isFilling={isFilling}\n              isCrossingOut={isCrossingOut}\n              gridSize={gridSize}\n              subGridSize={subGridSize}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={solvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={this.gridData}\n              coordinatesOrder={this.coordinatesOrder}\n            />\n\n            <Form className=\"mainForm\">\n              <Buttons\n                game={game}\n                changeMode={this.changeMode}\n                clear={this.clear}\n                revealSolution={this.revealSolution}\n                invert={this.invert}\n                importImage={this.importImage}\n                exportImage={this.exportImage}\n                share={this.share}\n                resizeGrids={this.resizeGrids}\n                print={this.print}\n                isAuthoring={isAuthoring}\n                isReadOnly={isReadOnly}\n                gridSizeMin={gridSizeMin}\n                gridSizeMax={gridSizeMax}\n                subGridSizeMin={subGridSizeMin}\n                subGridSizeMax={subGridSizeMax}\n                nonogramGridSizeMin={nonogramGridSizeMin}\n                nonogramGridSizeMax={nonogramGridSizeMax}\n                gridData={this.gridData}\n              />\n\n              <Footer game={game} />\n\n              <Print\n                gridSize={gridSize}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                unsolvedColor={unsolvedColor}\n                gridData={gridDataToPrint}\n                coordinatesOrder={this.coordinatesOrder}\n                game={game}\n                ref={this.printableRef}\n              />\n            </Form>\n          </div>\n\n          <div className=\"print\">\n            <h3>Unsupported operation! To print this puzzle, please click the <em>Print</em> button on the webpage itself</h3>\n          </div>\n        </ErrorBoundary>\n      </>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}