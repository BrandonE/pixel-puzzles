{"version":3,"sources":["lib/util.js","components/Cell.js","components/SubGrid.js","components/Grid.js","components/ErrorBoundary.js","components/Header.js","components/Coordinates.js","components/Main.js","components/Buttons.js","components/Footer.js","components/Crop.js","components/Print.js","App.js","reportWebVitals.js","index.js"],"names":["serializeGridData","gridData","flat","join","generateCoordinatesOrder","gridSize","coordinatesOrder","gridY","gridX","push","x","y","arr","j","temp","i","length","Math","floor","random","shuffleArray","jimpToSerializedGridData","jimpFile","subGridSize","serializedGridData","bitmap","width","height","gridWidthAndHeight","Error","subGridY","subGridX","Jimp","intToRGBA","getPixelColor","r","g","b","a","gridDataToJimp","filledColor","emptyColor","count","setPixelColor","rgbaToInt","decimalToHex","dec","toString","toUpperCase","padStart","getXLabel","getYLabel","getCoordinateLabel","Cell","props","verySmallWidth","React","useState","window","innerHeight","innerWidth","dimensions","setDimensions","useEffect","handleResize","currentWidth","addEventListener","_","removeEventListener","onCellEdit","onCellChanged","isPrinting","isFilled","widthAndHeight","className","style","backgroundColor","minWidth","minHeight","onPointerDown","onMouseEnter","e","isFilling","undefined","buttons","which","SubGrid","isAuthoring","isCoordinate","isRevealing","initialSubGridData","subGridData","subGridFilling","subGridDataRow","subGridFillingRow","initialValue","state","setTimeout","setState","bind","isSolved","value","this","JSON","stringify","solvedColor","unsolvedColor","border","touchAction","map","rowIndex","colIndex","Component","Grid","Array","fill","ErrorBoundary","hasError","error","onError","Button","variant","type","onClick","location","reload","children","Header","showUrl","Coordinates","coordinates","index","Main","Buttons","changeMode","clear","revealSolution","invert","importImage","exportImage","share","resizeGrids","print","isReadOnly","Row","Col","DropdownButton","title","filter","size","Dropdown","Item","onSelect","Form","Label","Control","name","accept","onChange","Group","Footer","href","target","rel","icon","faGithub","Crop","isCropping","crop","cropComponentRef","createRef","onImageLoaded","getCroppedImg","onCropComplete","onCropChange","onAspectChange","image","imageRef","fileName","canvas","document","createElement","pixelRatio","devicePixelRatio","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","setTransform","imageSmoothingQuality","drawImage","Promise","resolve","reject","toBlob","blob","URL","revokeObjectURL","fileUrl","createObjectURL","croppedImageUrl","onCropProcessed","percentCrop","isInitializing","widthPercentage","heightPercentage","isSquare","aspect","unit","current","onMediaLoaded","imageSrc","loading","position","src","ruleOfThirds","onComplete","ref","controlId","Check","label","checked","Print","preventUnload","preventDefault","returnValue","App","isLoading","printableRef","initializeGrid","confirmChangeMode","confirmImportImage","searchParams","URLSearchParams","search","query","Object","fromEntries","entries","parseInt","onselectstart","gridRow","subGridRow","generateGrid","filled","confirmAlert","message","set","delete","navigate","childrenElement","invertedSerializedGridData","file","files","reader","FileReader","read","result","getBase64","MIME_PNG","err","importedImageSrc","closeOnClickOutside","readAsDataURL","largerDimension","background","contain","resize","getBufferAsync","MIME_JPEG","u8","stringChar","reduce","data","byte","String","fromCharCode","b64Encoded","btoa","protocol","host","pathname","navigator","clipboard","writeText","toast","success","gridDataToPrint","trigger","content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.33311def.chunk.js","sourcesContent":["import Jimp from 'jimp/es'\n\n// https://stackoverflow.com/a/10142256/12055600\nconst shuffleArray = arr => {\n  let i = arr.length\n  let j\n  let temp\n\n  if (i === 0) {\n    return arr\n  }\n\n  while (--i) {\n    j = Math.floor(Math.random() * (i + 1))\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n  }\n\n  return arr\n}\n\nexport const serializeGridData = gridData => gridData.flat().flat().flat().join('')\n\nexport const generateGrid = (gridSize, subGridSize, serializedGridData) => {\n  const gridData = []\n  let count = 0\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    const gridRow = []\n\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      const subGridData = []\n\n      for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n        const subGridRow = []\n\n        for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n          const value = (serializedGridData) ? serializedGridData[count] : '0'\n          subGridRow.push((value === '1') ? 1 : 0)\n          count++\n        }\n\n        subGridData.push(subGridRow)\n      }\n\n      gridRow.push(subGridData)\n    }\n\n    gridData.push(gridRow)\n  }\n\n  return gridData\n}\n\nexport const generateCoordinatesOrder = gridSize => {\n  const coordinatesOrder = []\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      coordinatesOrder.push({\n        x: gridX,\n        y: gridY\n      })\n    }\n  }\n\n  return shuffleArray(coordinatesOrder)\n}\n\nexport const jimpToSerializedGridData = (jimpFile, gridSize, subGridSize) => {\n  let serializedGridData = ''\n  const { width, height } = jimpFile.bitmap\n  const gridWidthAndHeight = gridSize * subGridSize\n\n  if (gridWidthAndHeight !== width || gridWidthAndHeight !== height) {\n    // This should never be thrown.\n    throw new Error('Invalid image size.')\n  }\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n        for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n          const x = gridX * subGridSize + subGridX\n          const y = gridY * subGridSize + subGridY\n          const { r, g, b, a } = Jimp.intToRGBA(jimpFile.getPixelColor(x, y))\n          const rgb = r + g + b\n          const value = (rgb >= ((255 + 255 + 255) / 2) || a === 0) ? '0' : '1'\n          serializedGridData += value\n        }\n      }\n    }\n  }\n\n  return serializedGridData\n}\n\nexport const gridDataToJimp = (gridData, filledColor, emptyColor) => {\n  const serializedGridData = serializeGridData(gridData)\n  const gridSize = gridData.length\n  const subGridSize = gridData[0][0].length\n  const gridWidthAndHeight = gridSize * subGridSize\n\n  const jimpFile = new Jimp(gridWidthAndHeight, gridWidthAndHeight)\n  let count = 0\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n        for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n          const x = gridX * subGridSize + subGridX\n          const y = gridY * subGridSize + subGridY\n          const { r, g, b } = Jimp.intToRGBA((serializedGridData[count] === '1') ? filledColor : emptyColor)\n\n          jimpFile.setPixelColor(Jimp.rgbaToInt(r, g, b, 255), x, y)\n\n          count++\n        }\n      }\n    }\n  }\n\n  return jimpFile\n}\n\nexport const decimalToHex = dec => `#${dec.toString(16).toUpperCase().padStart(6, '0')}`\nexport const getXLabel = x => 'ABCDEFGHIJK'[x]\nexport const getYLabel = y => y + 1\nexport const getCoordinateLabel = (x, y) => getXLabel(x) + getYLabel(y)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { decimalToHex } from '../lib/util'\n\nconst Cell = props => {\n  const verySmallWidth = 600\n\n  const [dimensions, setDimensions] = React.useState({\n    height: window.innerHeight,\n    width: window.innerWidth\n  })\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      const currentWidth = dimensions.width\n\n      if (\n        (currentWidth > verySmallWidth && window.innerWidth <= verySmallWidth) ||\n          (currentWidth <= verySmallWidth && window.innerWidth > verySmallWidth)\n      ) {\n        setDimensions({\n          height: window.innerHeight,\n          width: window.innerWidth\n        })\n      }\n    }\n\n    window.addEventListener('resize', handleResize)\n\n    return _ => {\n      window.removeEventListener('resize', handleResize)\n    }\n  })\n\n  const {\n    onCellEdit, onCellChanged, isPrinting, gridSize, subGridSize,\n    filledColor, emptyColor, gridY, gridX, subGridY, subGridX, isFilled\n  } = props\n\n  const windowWidth = dimensions.width\n  const scale = (isPrinting) ? 50 : 40\n  const widthAndHeight = (windowWidth > verySmallWidth) ? `${scale / (gridSize * subGridSize)}vw` : '6px'\n\n  return (\n    <td\n      className=\"cell\"\n\n      style={{\n        backgroundColor: decimalToHex((isFilled) ? filledColor : emptyColor),\n        minWidth: widthAndHeight,\n        minHeight: widthAndHeight,\n        width: widthAndHeight,\n        height: widthAndHeight\n      }}\n\n      onPointerDown={() => {\n        const { isFilled } = props\n\n        if (onCellEdit) {\n          onCellEdit(isFilled)\n        }\n\n        if (onCellChanged) {\n          onCellChanged(gridY, gridX, subGridY, subGridX, !isFilled)\n        }\n      }}\n\n      onMouseEnter={e => {\n        const { isFilling } = props\n\n        if (onCellChanged && e.buttons === undefined ? e.which === 1 : e.buttons === 1) {\n          onCellChanged(gridY, gridX, subGridY, subGridX, isFilling)\n        }\n      }}\n    >\n    </td>\n  )\n}\n\nCell.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  isFilling: PropTypes.bool,\n  isPrinting: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  gridY: PropTypes.number.isRequired,\n  gridX: PropTypes.number.isRequired,\n  subGridY: PropTypes.number.isRequired,\n  subGridX: PropTypes.number.isRequired,\n  isFilled: PropTypes.number.isRequired\n}\n\nexport default Cell\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Cell from './Cell'\nimport { decimalToHex } from '../lib/util'\n\nclass SubGrid extends React.Component {\n  constructor (props) {\n    super()\n    const { isAuthoring, isCoordinate, isRevealing, subGridSize } = props\n    const { initialSubGridData } = props\n\n    const subGridData = []\n    const subGridFilling = []\n\n    for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n      const subGridDataRow = []\n      const subGridFillingRow = []\n\n      for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n        if (initialSubGridData) {\n          const initialValue = initialSubGridData[subGridY][subGridX]\n\n          subGridDataRow.push(initialValue)\n\n          if (isAuthoring || isCoordinate) {\n            subGridFillingRow.push(initialValue)\n          } else {\n            subGridFillingRow.push(0)\n          }\n        } else {\n          subGridDataRow.push(0)\n          subGridFillingRow.push(0)\n        }\n      }\n\n      subGridData.push(subGridDataRow)\n      subGridFilling.push(subGridFillingRow)\n    }\n\n    this.state = {\n      subGridData,\n      subGridFilling\n    }\n\n    if (isRevealing) {\n      setTimeout(() => {\n        this.setState({\n          subGridFilling: subGridData\n        })\n      }, Math.random() * 1000)\n    }\n\n    this.onCellChanged = this.onCellChanged.bind(this)\n    this.isSolved = this.isSolved.bind(this)\n  }\n\n  onCellChanged (gridY, gridX, subGridY, subGridX, value) {\n    const { onCellChanged, isAuthoring, isCoordinate } = this.props\n    const { subGridData, subGridFilling } = this.state\n\n    if (!isCoordinate && onCellChanged) {\n      if (isAuthoring) {\n        subGridData[subGridY][subGridX] = (value) ? 1 : 0\n        subGridFilling[subGridY][subGridX] = subGridData[subGridY][subGridX]\n        onCellChanged(gridY, gridX, subGridY, subGridX, value)\n      }\n\n      subGridFilling[subGridY][subGridX] = (value) ? 1 : 0\n    }\n\n    this.setState({\n      subGridData,\n      subGridFilling\n    })\n  }\n\n  isSolved () {\n    const { isAuthoring, isCoordinate } = this.props\n    const { subGridData, subGridFilling } = this.state\n    // TODO: Hide non-printed coordinates when solved. Show Toast notification when all sub-grids are solved.\n    return (!isAuthoring && !isCoordinate && JSON.stringify(subGridData) === JSON.stringify(subGridFilling))\n  }\n\n  render () {\n    const {\n      onCellEdit, isCoordinate, isFilling, isPrinting, gridSize, subGridSize,\n      filledColor, emptyColor, solvedColor, unsolvedColor, gridY, gridX\n    } = this.props\n    const { subGridFilling } = this.state\n\n    return (\n      <td\n        className=\"subGrid\"\n        style={{\n          border: `1px solid ${decimalToHex(this.isSolved() ? solvedColor : unsolvedColor)}`,\n          touchAction: (isCoordinate) ? 'auto' : 'none'\n        }}\n      >\n        <table>\n          <tbody>\n            {subGridFilling.map((subGridFillingRow, rowIndex) => (\n              <tr key={rowIndex}>\n                {subGridFillingRow.map((isFilled, colIndex) => (\n                  <Cell\n                    key={colIndex}\n                    onCellEdit={onCellEdit}\n                    onCellChanged={this.onCellChanged}\n                    isFilling={isFilling}\n                    isPrinting={isPrinting}\n                    gridSize={gridSize}\n                    subGridSize={subGridSize}\n                    filledColor={filledColor}\n                    emptyColor={emptyColor}\n                    gridY={gridY}\n                    gridX={gridX}\n                    subGridY={rowIndex}\n                    subGridX={colIndex}\n                    isFilled={isFilled}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </td>\n    )\n  }\n}\n\nSubGrid.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  isAuthoring: PropTypes.bool,\n  isCoordinate: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isRevealing: PropTypes.bool,\n  isPrinting: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridY: PropTypes.number.isRequired,\n  gridX: PropTypes.number.isRequired,\n  initialSubGridData: PropTypes.array\n}\n\nexport default SubGrid\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SubGrid from './SubGrid'\nimport { getXLabel, getYLabel } from '../lib/util'\n\nconst Grid = props => {\n  const {\n    onCellEdit, onCellChanged, isAuthoring, isFilling, isRevealing, isPrinting,\n    gridSize, subGridSize, filledColor, emptyColor, solvedColor, unsolvedColor, gridData\n  } = props\n\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <td></td>\n          {Array(gridSize).fill().map((_, colIndex) => (\n            <td key={colIndex}>{getXLabel(colIndex)}</td>\n          ))}\n        </tr>\n\n        {Array(gridSize).fill().map((_, rowIndex) => (\n          <tr key={rowIndex}>\n            <td>{getYLabel(rowIndex)}</td>\n            {Array(gridSize).fill().map((_, colIndex) => (\n              <SubGrid\n                key={colIndex}\n                onCellEdit={onCellEdit}\n                onCellChanged={onCellChanged}\n                isAuthoring={isAuthoring}\n                isFilling={isFilling}\n                isRevealing={isRevealing}\n                isPrinting={isPrinting}\n                gridSize={gridSize}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={solvedColor}\n                unsolvedColor={unsolvedColor}\n                gridY={rowIndex}\n                gridX={colIndex}\n                initialSubGridData={gridData[rowIndex][colIndex]}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nGrid.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  isAuthoring: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isRevealing: PropTypes.bool,\n  isPrinting: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired\n}\n\nexport default Grid\n","import React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport PropTypes from 'prop-types'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error) {\n    this.setState({ hasError: true })\n    this.props.onError(error)\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return (\n        <>\n          <h1>Something went wrong.</h1>\n          <Button variant=\"primary\" type=\"submit\" onClick={() => window.location.reload(false)}>Reload application</Button>\n        </>\n      )\n    }\n\n    return this.props.children\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ]).isRequired,\n  onError: PropTypes.func.isRequired\n}\n\nexport default ErrorBoundary\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Header = props => (\n  <>\n    <h1>Pixel Puzzles</h1>\n    <h4>Copy each square&apos;s pattern to the associated coordinates to reveal a secret image!</h4>\n    <h6>Fill the grid in your browser or print the puzzle to complete by hand. Edit the puzzle or generate your own using any image. Share puzzles with your friends and family! {props.showUrl && <>https://brandone.github.io/pixel-puzzles/</>}</h6>\n  </>\n)\n\nHeader.propTypes = {\n  showUrl: PropTypes.bool\n}\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SubGrid from './SubGrid'\nimport { getCoordinateLabel } from '../lib/util'\n\nconst Coordinates = props => {\n  const {\n    gridSize, subGridSize, filledColor, emptyColor,\n    solvedColor, unsolvedColor, gridData, coordinatesOrder\n  } = props\n\n  return (\n    coordinatesOrder.map((coordinates, index) => {\n      const { x, y } = coordinates\n\n      return (\n        <table className=\"coordinates\" key={index}>\n          <tbody>\n            <tr>\n              <td>{getCoordinateLabel(x, y)}</td>\n            </tr>\n            <tr>\n              <SubGrid\n                isCoordinate={true}\n                gridSize={gridSize}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={solvedColor}\n                unsolvedColor={unsolvedColor}\n                gridY={y}\n                gridX={x}\n                initialSubGridData={gridData[y][x]}\n              />\n            </tr>\n          </tbody>\n        </table>\n      )\n    })\n  )\n}\n\nCoordinates.propTypes = {\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Coordinates\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Grid from './Grid'\nimport Coordinates from './Coordinates'\n\nclass Main extends React.Component {\n  render () {\n    const {\n      onCellEdit, onCellChanged, isAuthoring, isFilling, gridSize, subGridSize,\n      filledColor, emptyColor, solvedColor, unsolvedColor, gridData,\n      coordinatesOrder\n    } = this.props\n\n    return (\n      <>\n        <div>\n          <div className=\"grid\">\n            <Grid\n              onCellEdit={onCellEdit}\n              onCellChanged={onCellChanged}\n              isAuthoring={isAuthoring}\n              isFilling={isFilling}\n              gridSize={gridSize}\n              subGridSize={subGridSize}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={solvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={gridData}\n            />\n          </div>\n\n          {!isAuthoring && (\n            <Coordinates\n              gridSize={gridSize}\n              subGridSize={subGridSize}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={solvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={gridData}\n              coordinatesOrder={coordinatesOrder}\n            />\n          )}\n        </div>\n      </>\n    )\n  }\n}\n\nMain.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  isAuthoring: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Main\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Row, Col, Button, Form, Dropdown, DropdownButton } from 'react-bootstrap'\n\nconst Buttons = props => {\n  const {\n    changeMode, clear, revealSolution, invert, importImage, exportImage,\n    share, resizeGrids, print, isAuthoring, isReadOnly, gridData\n  } = props\n\n  const gridSize = gridData.length\n  const subGridSize = gridData[0][0].length\n\n  return (\n    <>\n      {isAuthoring && (\n        <>\n          <Row>\n            <Col>\n              <DropdownButton title=\"Resize Grid\">\n                { /* Sizes allowed are 2-9 */ }\n                {Array(9).fill(0).map((_, i) => i + 1).filter(\n                  size => size >= 2 && size !== gridSize\n                ).map(size => (\n                  <Dropdown.Item\n                    key={size}\n                    onSelect={() => resizeGrids(size, subGridSize)}\n                  >\n                    {size}x{size}\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n\n              <DropdownButton title=\"Resize Sub-Grid\">\n                { /* Sizes allowed are 2-9 */ }\n                {Array(9).fill(0).map((_, i) => i + 1).filter(\n                  size => size >= 2 && size !== subGridSize\n                ).map(size => (\n                  <Dropdown.Item\n                    key={size}\n                    onSelect={() => resizeGrids(gridSize, size)}\n                  >\n                    {size}x{size}\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n              <Button onClick={invert}>Invert</Button>\n            </Col>\n          </Row>\n\n          <Row>\n            <Form.Label>Import from Image</Form.Label>\n            <Form.Control\n              type=\"file\" name=\"files\"\n              accept=\".bmp, .gif, .jpg, .jpeg, .png, .tiff\"\n              onChange={importImage}\n            />\n          </Row>\n\n          <Row>\n            <Col>\n              <Button onClick={exportImage}>Export as Image</Button>\n            </Col>\n          </Row>\n        </>\n      )}\n\n      {!isAuthoring && !isReadOnly && (\n        <Row>\n          <Col>\n            <Form.Group className=\"mb-3\">\n              <Button variant=\"warning\" onClick={revealSolution}>Reveal Solution</Button>\n            </Form.Group>\n          </Col>\n        </Row>\n      )}\n\n      {!isReadOnly && (\n        <Row>\n          <Col>\n            <Button variant=\"danger\" onClick={clear}>Clear</Button>\n            <Button variant=\"danger\" onClick={changeMode}>{(isAuthoring) ? 'Play' : 'Edit'}</Button>\n          </Col>\n        </Row>\n      )}\n\n      <Row>\n        <Col>\n          <Button onClick={print}>Print</Button>\n          <Button onClick={share}>Share</Button>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nButtons.propTypes = {\n  changeMode: PropTypes.func.isRequired,\n  clear: PropTypes.func.isRequired,\n  revealSolution: PropTypes.func.isRequired,\n  invert: PropTypes.func.isRequired,\n  importImage: PropTypes.func.isRequired,\n  exportImage: PropTypes.func.isRequired,\n  share: PropTypes.func.isRequired,\n  resizeGrids: PropTypes.func.isRequired,\n  print: PropTypes.func.isRequired,\n  isAuthoring: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  gridData: PropTypes.array.isRequired\n}\n\nexport default Buttons\n","import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n\nconst Footer = () => (\n  <Row className=\"footer\">\n    <Col>\n      Created by <a href=\"https://github.com/BrandonE\" target=\"_blank\" rel=\"noreferrer\">Brandon Evans</a>.\n      Inspired by <a href=\"https://web.archive.org/web/20111027002447/http://www.tipstricks.com/puzzles.html\" target=\"_blank\" rel=\"noreferrer\">Pencil Puzzles</a> from <a href=\"https://en.wikipedia.org/wiki/Tips_%26_Tricks_(magazine)\">Tips &amp; Tricks Magazine</a>\n      &nbsp; <a href=\"https://github.com/BrandonE/pixel-puzzles\" target=\"_blank\" rel=\"noreferrer\"><FontAwesomeIcon icon={faGithub}></FontAwesomeIcon></a>\n    </Col>\n  </Row>\n)\n\nexport default Footer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Form } from 'react-bootstrap'\nimport ReactCrop from 'react-image-crop'\nimport { SpinnerComponent } from 'react-element-spinner'\nimport ScrollArea from 'react-scrollbar'\nimport 'react-image-crop/dist/ReactCrop.css'\n\nclass Crop extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      isCropping: true,\n      crop: {}\n    }\n\n    this.cropComponentRef = React.createRef()\n\n    this.onImageLoaded = this.onImageLoaded.bind(this)\n    this.getCroppedImg = this.getCroppedImg.bind(this)\n    this.onCropComplete = this.onCropComplete.bind(this)\n    this.onCropChange = this.onCropChange.bind(this)\n    this.onAspectChange = this.onAspectChange.bind(this)\n  }\n\n  componentDidMount () {\n    this.onAspectChange(true)\n  }\n\n  onImageLoaded (image) {\n    this.imageRef = image\n  }\n\n  async getCroppedImg (image, crop, fileName) {\n    const canvas = document.createElement('canvas')\n    const pixelRatio = window.devicePixelRatio\n    const scaleX = image.naturalWidth / image.width\n    const scaleY = image.naturalHeight / image.height\n    const ctx = canvas.getContext('2d')\n\n    canvas.width = crop.width * pixelRatio * scaleX\n    canvas.height = crop.height * pixelRatio * scaleY\n\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0)\n    ctx.imageSmoothingQuality = 'high'\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width * scaleX,\n      crop.height * scaleY\n    )\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        (blob) => {\n          if (!blob) {\n            reject(new Error('Canvas is empty'))\n            return\n          }\n\n          blob.name = fileName\n          window.URL.revokeObjectURL(this.fileUrl)\n          this.fileUrl = window.URL.createObjectURL(blob)\n          resolve(this.fileUrl)\n        },\n        'image/png'\n      )\n    })\n  }\n\n  async onCropComplete (crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      this.setState({\n        isCropping: true\n      })\n\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        'newFile.png'\n      )\n\n      this.props.onCropProcessed(croppedImageUrl)\n\n      this.setState({\n        isCropping: false\n      })\n    }\n  }\n\n  onCropChange (crop, percentCrop) {\n    this.setState({ crop: percentCrop })\n  }\n\n  onAspectChange (isInitializing) {\n    const { width, height } = this.props\n    const { crop } = this.state\n    const isSquare = !crop.aspect\n    let widthPercentage, heightPercentage\n\n    if (isSquare) {\n      if (width < height) {\n        widthPercentage = 100\n        heightPercentage = width / height * 100\n      } else {\n        heightPercentage = 100\n        widthPercentage = height / width * 100\n      }\n    } else {\n      widthPercentage = 100\n      heightPercentage = 100\n    }\n\n    this.setState({\n      crop: {\n        unit: '%',\n        width: widthPercentage,\n        height: heightPercentage,\n        x: 0,\n        y: 0,\n        aspect: (isSquare) ? 1 : undefined\n      }\n    }, () => {\n      if (!isInitializing) {\n        this.cropComponentRef.current.onMediaLoaded()\n      }\n    })\n  }\n\n  render () {\n    const { imageSrc } = this.props\n    const { isCropping, crop } = this.state\n\n    return (\n      <div>\n        <SpinnerComponent loading={isCropping} position=\"global\" />\n\n        <ScrollArea>\n          <ReactCrop\n            src={imageSrc}\n            crop={crop}\n            ruleOfThirds\n            onImageLoaded={this.onImageLoaded}\n            onComplete={this.onCropComplete}\n            onChange={this.onCropChange}\n            ref={this.cropComponentRef}\n          />\n        </ScrollArea>\n\n        <Form>\n          <Form.Group controlId=\"formBasicCheckbox\">\n            <Form.Check\n              type=\"checkbox\" label=\"Square Aspect Ratio (1:1)\"\n              checked={!!crop.aspect} onChange={() => this.onAspectChange()}\n            />\n          </Form.Group>\n        </Form>\n      </div>\n    )\n  }\n}\n\nCrop.propTypes = {\n  imageSrc: PropTypes.string.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  onCropProcessed: PropTypes.func.isRequired\n}\n\nexport default Crop\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Header from './Header'\nimport Grid from './Grid'\nimport Coordinates from './Coordinates'\nimport Footer from './Footer'\n\nclass Print extends React.Component {\n  render () {\n    const {\n      gridSize, subGridSize, filledColor, emptyColor,\n      // Don't indicate which boxes are empty to begin with; always use unsolved color.\n      unsolvedColor, gridData, coordinatesOrder\n    } = this.props\n\n    if (!gridData) {\n      return <></>\n    }\n\n    return (\n      <div className=\"print\">\n        <Header showUrl={true} />\n\n        {gridData && (\n          <>\n            <div className=\"grid\">\n              <Grid\n                isPrinting={true}\n                gridSize={gridSize}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={unsolvedColor}\n                unsolvedColor={unsolvedColor}\n                gridData={gridData}\n              />\n            </div>\n\n            <Coordinates\n              gridSize={gridSize}\n              subGridSize={subGridSize}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={unsolvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={gridData}\n              coordinatesOrder={coordinatesOrder}\n            />\n          </>\n        )}\n\n        <Footer />\n      </div>\n    )\n  }\n}\n\nPrint.propTypes = {\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Print\n","import React from 'react'\nimport Grid from './components/Grid'\nimport { Form, Button } from 'react-bootstrap'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast, ToastContainer } from 'react-toastify'\nimport { SpinnerComponent } from 'react-element-spinner'\nimport ReactToPrint from 'react-to-print'\nimport Jimp from 'jimp/es'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './App.css'\nimport ErrorBoundary from './components/ErrorBoundary'\nimport Header from './components/Header'\nimport Main from './components/Main'\nimport Buttons from './components/Buttons'\nimport Footer from './components/Footer'\nimport Crop from './components/Crop'\nimport {\n  generateGrid, generateCoordinatesOrder, serializeGridData,\n  jimpToSerializedGridData, gridDataToJimp\n} from './lib/util'\nimport Print from './components/Print'\n\nconst serializedGridDataGitHub = '0000000000000000000000000000000000000000000110011100001001111111111111111111111111111111111111111111111111111111111111111111110000111001111111111111110000000000000001100011100000000000000000000000000000000000000000100011000110111111111111111111111110111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111111111100011110111111111111111011110000000000100001100011000001110011101111011110111111110111101111011110111100000100000000000000000000110000000000000000000000000011000000000000000000001000000000000000000000000011110111101111011110111111100111001111011110111101111111111111111111111111111101110011100111001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100111001110011100111111111111111111111111111111111111111111111111111111110011100111001110011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111001110011100111001111111111111111111111111111111110111101111011110011111110111111111111111101110000000000100001110011111000000000000000000001000000000000000000000000000010000000000000010011111111011111111111111111111111111111111101111011110111000011100011000110000100000110111110111101111101111111111111111111101101000001000010000000000000000000000010000100000000000000011111111111111111111111111111111111111111111111111111001100011000100000000000000000000000000000000000111100111000110000000000111111111111111111110011100000000000000000000000000000000000000000000000000111111111111111111111110011110111001100000000000000000000000000000000000000'\n\nconst defaultGridSize = 8\nconst defaultSubGridSize = 5\n\nconst preventUnload = e => {\n  // Cancel the event\n  e.preventDefault() // If you prevent default behavior in Mozilla Firefox prompt will always be shown\n  // Chrome requires returnValue to be set\n  e.returnValue = ''\n}\n\nclass App extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      isAuthoring: false,\n      isReadOnly: false,\n      // TODO: Move this down to Grid to avoid re-rendering coordinates and make things faster.\n      isFilling: false,\n      filledColor: 0x00000000,\n      emptyColor: 0xFFFFFFFF,\n      solvedColor: 0xFFFF00FF,\n      unsolvedColor: 0x808080FF,\n      isLoading: false\n    }\n\n    this.printableRef = React.createRef()\n\n    this.initializeGrid = this.initializeGrid.bind(this)\n    this.onCellEdit = this.onCellEdit.bind(this)\n    this.onCellChanged = this.onCellChanged.bind(this)\n    this.changeMode = this.changeMode.bind(this)\n    this.confirmChangeMode = this.confirmChangeMode.bind(this)\n    this.clear = this.clear.bind(this)\n    this.revealSolution = this.revealSolution.bind(this)\n    this.invert = this.invert.bind(this)\n    this.onCropProcessed = this.onCropProcessed.bind(this)\n    this.importImage = this.importImage.bind(this)\n    this.confirmImportImage = this.confirmImportImage.bind(this)\n    this.exportImage = this.exportImage.bind(this)\n    this.share = this.share.bind(this)\n    this.resizeGrids = this.resizeGrids.bind(this)\n    this.print = this.print.bind(this)\n  }\n\n  componentDidMount () {\n    const searchParams = new URLSearchParams(window.location.search)\n    const query = Object.fromEntries(searchParams.entries())\n    let gridSize = parseInt(query.gridSize, 10)\n    let subGridSize = parseInt(query.subGridSize, 10)\n\n    if (!gridSize || gridSize < 2 || gridSize > 9) {\n      gridSize = defaultGridSize\n    }\n\n    if (!subGridSize || subGridSize < 2 || subGridSize > 9) {\n      subGridSize = defaultSubGridSize\n    }\n\n    document.onselectstart = () => false\n\n    window.addEventListener('beforeunload', preventUnload)\n\n    this.initializeGrid(gridSize, subGridSize, query.gridData)\n\n    const isAuthoring = (query.isAuthoring === 'true')\n\n    this.setState({\n      isAuthoring,\n      isReadOnly: (query.isReadOnly === 'true') && !isAuthoring,\n      gridSize,\n      subGridSize\n    })\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('beforeunload', preventUnload)\n  }\n\n  navigate (searchParams) {\n    window.removeEventListener('beforeunload', preventUnload)\n    window.location.search = searchParams.toString()\n  }\n\n  initializeGrid (gridSize, subGridSize, serializedGridData) {\n    if (!serializedGridData && gridSize === defaultGridSize && subGridSize === defaultSubGridSize) {\n      serializedGridData = serializedGridDataGitHub\n    }\n\n    this.gridData = generateGrid(gridSize, subGridSize, serializedGridData)\n    this.coordinatesOrder = generateCoordinatesOrder(gridSize)\n  }\n\n  onCellEdit (filled) {\n    this.setState({\n      isFilling: !filled\n    })\n  }\n\n  onCellChanged (gridY, gridX, subGridY, subGridX, value) {\n    this.gridData[gridY][gridX][subGridY][subGridX] = (value) ? 1 : 0\n  }\n\n  changeMode () {\n    const { isAuthoring } = this.state\n\n    if (isAuthoring) {\n      this.confirmChangeMode()\n    } else {\n      confirmAlert({\n        title: 'Confirmation',\n        message: 'Are you sure you want to edit the puzzle? This will undo your progress and reveal the solution!',\n        buttons: [\n          {\n            label: 'Yes',\n            onClick: this.confirmChangeMode\n          },\n          {\n            label: 'No'\n          }\n        ]\n      })\n    }\n  }\n\n  confirmChangeMode () {\n    const { isAuthoring } = this.state\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', serializeGridData(this.gridData))\n    searchParams.set('isAuthoring', JSON.stringify(!isAuthoring))\n    searchParams.delete('isReadOnly')\n    this.navigate(searchParams)\n  }\n\n  clear () {\n    const { isAuthoring } = this.state\n\n    confirmAlert({\n      title: 'Confirmation',\n      message: `Are you sure you want to clear ${isAuthoring ? 'the canvas' : 'your progress'}? This cannot be undone.`,\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            const searchParams = new URLSearchParams(window.location.search)\n\n            if (isAuthoring) {\n              // Clear the canvas.\n              searchParams.set('gridData', '0')\n            } else {\n              // Clear your progress, not the grid data (actual puzzle contents).\n              searchParams.set('gridData', serializeGridData(this.gridData))\n            }\n\n            searchParams.set('isAuthoring', JSON.stringify(isAuthoring))\n            this.navigate(searchParams)\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  revealSolution () {\n    confirmAlert({\n      title: 'Confirmation',\n      message: 'Are you sure you want to reveal the solution? This spoils the fun!',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            setTimeout(() => {\n              confirmAlert({\n                title: 'Solution',\n                childrenElement: () => {\n                  const { gridSize, subGridSize, filledColor, emptyColor, solvedColor, unsolvedColor } = this.state\n\n                  if (!this.gridData) {\n                    return <></>\n                  }\n\n                  return (\n                    <Grid\n                      isRevealing={true}\n                      isFilling={false}\n                      gridSize={gridSize}\n                      subGridSize={subGridSize}\n                      filledColor={filledColor}\n                      emptyColor={emptyColor}\n                      solvedColor={solvedColor}\n                      unsolvedColor={unsolvedColor}\n                      gridData={this.gridData}\n                    />\n                  )\n                },\n                buttons: [\n                  {\n                    label: 'Continue'\n                  }\n                ]\n              })\n            }, 0) // Required to make sure the first alert is dismissed before the next is revealed.\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  invert () {\n    const serializedGridData = serializeGridData(this.gridData)\n    let invertedSerializedGridData = ''\n\n    for (let i = 0; i < serializedGridData.length; i++) {\n      invertedSerializedGridData += (serializedGridData[i] === '1') ? '0' : '1'\n    }\n\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', invertedSerializedGridData)\n    this.navigate(searchParams)\n  }\n\n  onCropProcessed (croppedImageUrl) {\n    this.setState({ croppedImageUrl })\n  }\n\n  importImage (e) {\n    const file = e.target.files[0]\n    e.target.value = ''\n\n    this.setState({\n      isLoading: true\n    })\n\n    const reader = new FileReader()\n\n    reader.addEventListener('load', async () => {\n      const jimpFile = await Jimp.read(reader.result)\n      const { width, height } = jimpFile.bitmap\n\n      const importedImageSrc = await new Promise((resolve, reject) => {\n        // Converting to PNG ensures GIFs are processed properly.\n        jimpFile.getBase64(Jimp.MIME_PNG, (err, src) => {\n          if (err) {\n            reject(err)\n          } else {\n            resolve(src)\n          }\n        })\n      })\n\n      this.setState({\n        isLoading: false\n      })\n\n      confirmAlert({\n        title: 'Confirmation',\n        message: 'Are you sure you want to import this image? Your current canvas will be overwritten.',\n        childrenElement: () => <Crop\n          imageSrc={importedImageSrc}\n          width={width}\n          height={height}\n          onImageLoaded={this.onImageLoaded}\n          onCropProcessed={this.onCropProcessed}\n        />,\n        buttons: [\n          {\n            label: 'Import',\n            onClick: () => this.confirmImportImage()\n          },\n          {\n            label: 'Cancel'\n          }\n        ],\n        closeOnClickOutside: false\n      })\n    })\n\n    reader.readAsDataURL(file)\n  }\n\n  async confirmImportImage () {\n    const { croppedImageUrl } = this.state\n\n    this.setState({\n      isLoading: true\n    })\n\n    const jimpFile = await Jimp.read(croppedImageUrl)\n    const gridSize = this.gridData.length\n    const subGridSize = this.gridData[0][0].length\n    const gridWidthAndHeight = gridSize * subGridSize\n\n    const { width, height } = jimpFile.bitmap\n    const largerDimension = (width > height) ? width : height\n\n    jimpFile\n      .background(0xFFFFFFFF)\n      .contain(largerDimension, largerDimension)\n      .resize(gridWidthAndHeight, gridWidthAndHeight)\n\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', jimpToSerializedGridData(jimpFile, gridSize, subGridSize))\n    this.navigate(searchParams)\n  }\n\n  async exportImage () {\n    const { filledColor, emptyColor } = this.state\n    const image = gridDataToJimp(this.gridData, filledColor, emptyColor)\n    const u8 = await image.getBufferAsync(Jimp.MIME_JPEG)\n\n    // https://medium.com/@koteswar.meesala/convert-array-buffer-to-base64-string-to-display-images-in-angular-7-4c443db242cd\n    const stringChar = u8.reduce((data, byte) => {\n      return data + String.fromCharCode(byte)\n    }, '')\n\n    const b64Encoded = btoa(stringChar)\n\n    confirmAlert({\n      title: 'Image',\n      childrenElement: () => {\n        return (\n          <>\n            Right-click and &quot;Save Image As&quot; to download the image.\n            <div><img src={`data:image/jpeg;base64, ${b64Encoded}`} /></div>\n          </>\n        )\n      },\n      buttons: [\n        {\n          label: 'Continue'\n        }\n      ]\n    })\n  }\n\n  share () {\n    const { protocol, host, pathname } = window.location\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('isAuthoring', 'false')\n    searchParams.delete('isReadOnly')\n    searchParams.set('gridData', serializeGridData(this.gridData))\n    navigator.clipboard.writeText(`${protocol}//${host}${pathname}?${searchParams.toString()}`)\n    toast.success('URL copied to your clipboard!')\n  }\n\n  resizeGrids (gridSize, subGridSize) {\n    confirmAlert({\n      title: 'Confirmation',\n      message: 'Are you sure you want to resize? This will clear the canvas.',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            const searchParams = new URLSearchParams(window.location.search)\n            searchParams.set('gridSize', gridSize)\n            searchParams.set('subGridSize', subGridSize)\n            searchParams.set('gridData', '0')\n            this.navigate(searchParams)\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  print () {\n    this.setState({\n      gridDataToPrint: this.gridData\n    })\n\n    confirmAlert({\n      title: 'Print',\n      message: 'Click this button to print the puzzle. Works best on Google Chrome. ',\n      childrenElement: () => (\n        <ReactToPrint\n          trigger={() => (\n            <Button>Print</Button>\n          )}\n          content={() => this.printableRef.current}\n        />\n      ),\n      buttons: [\n        {\n          label: 'Cancel'\n        }\n      ]\n    })\n  }\n\n  render () {\n    const {\n      isAuthoring, isReadOnly, isFilling, gridSize, subGridSize, filledColor,\n      emptyColor, solvedColor, unsolvedColor, isLoading, gridDataToPrint,\n      hasError\n    } = this.state\n\n    if (hasError) {\n      <h1>An unexpected error has occurred. Please reload this page.</h1>\n    }\n\n    if (!this.gridData) {\n      return <></>\n    }\n\n    return (\n      <>\n        <ToastContainer />\n\n        <ErrorBoundary onError={err => toast.error(err.toString())}>\n          <div className=\"no-print\">\n            <SpinnerComponent loading={isLoading} position=\"global\" />\n            <Header />\n\n            <Main\n              onCellEdit={this.onCellEdit}\n              onCellChanged={this.onCellChanged}\n              isAuthoring={isAuthoring}\n              isFilling={isFilling}\n              gridSize={gridSize}\n              subGridSize={subGridSize}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={solvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={this.gridData}\n              coordinatesOrder={this.coordinatesOrder}\n            />\n\n            <Form className=\"mainForm\">\n              <Buttons\n                changeMode={this.changeMode}\n                clear={this.clear}\n                revealSolution={this.revealSolution}\n                invert={this.invert}\n                importImage={this.importImage}\n                exportImage={this.exportImage}\n                share={this.share}\n                resizeGrids={this.resizeGrids}\n                print={this.print}\n                isAuthoring={isAuthoring}\n                isReadOnly={isReadOnly}\n                gridData={this.gridData}\n              />\n\n              <Footer />\n\n              <Print\n                gridSize={gridSize}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                unsolvedColor={unsolvedColor}\n                gridData={gridDataToPrint}\n                coordinatesOrder={this.coordinatesOrder}\n                ref={this.printableRef}\n              />\n            </Form>\n          </div>\n\n          <div className=\"print\">\n            <h3>Unsupported operation! To print this puzzle, please click the <em>Print</em> button on the webpage itself</h3>\n          </div>\n        </ErrorBoundary>\n      </>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}