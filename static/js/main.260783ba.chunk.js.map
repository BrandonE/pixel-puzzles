{"version":3,"sources":["App.js","components/Main.js","components/Buttons.js","components/Print.js","reportWebVitals.js","index.js","components/Grid.js","components/Header.js","components/Coordinates.js","components/Footer.js","components/Cell.js","components/SubGrid.js","lib/util.js"],"names":["serializedGridDataGitHub","App","state","isAuthoring","isFilling","filledColor","emptyColor","solvedColor","unsolvedColor","printableRef","React","createRef","initializeGrid","bind","onCellEdit","onCellChanged","changeMode","confirmChangeMode","clear","revealSolution","invert","importImage","exportImage","share","resizeCanvas","print","searchParams","URLSearchParams","window","location","search","query","Object","fromEntries","entries","document","onselectstart","this","setState","size","gridData","serializedGridData","deserializedSize","Math","sqrt","length","toast","error","generateGrid","coordinatesOrder","generateCoordinatesOrder","filled","gridY","gridX","subGridY","subGridX","value","confirmAlert","title","message","buttons","label","onClick","set","serializeGridData","JSON","stringify","toString","repeat","setTimeout","childrenElement","isRevealing","invertedSerializedGridData","i","e","file","target","files","reader","FileReader","onload","a","Jimp","read","Buffer","from","result","jimpFile","pow","contrast","resize","jimpToSerializedGridData","readAsArrayBuffer","image","serializedGridDataToJimp","getBufferAsync","MIME_PNG","u8","stringChar","reduce","data","byte","String","fromCharCode","b64Encoded","btoa","src","protocol","host","pathname","navigator","clipboard","writeText","success","gridDataToPrint","trigger","content","current","ref","Component","Main","props","className","Buttons","Array","fill","map","_","filter","Item","onSelect","Label","Control","type","name","accept","onChange","Group","variant","Print","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","Grid","colIndex","getXLabel","rowIndex","getYLabel","initialSubGridData","Header","Coordinates","coordinates","index","x","y","getCoordinateLabel","isCoordinate","Footer","href","rel","icon","faGithub","Cell","isFilled","style","backgroundColor","decimalToHex","onPointerDown","onMouseEnter","undefined","which","SubGrid","subGridData","subGridFilling","subGridDataRow","subGridFillingRow","initialValue","push","random","isSolved","border","flat","join","count","gridRow","subGridRow","arr","j","temp","floor","shuffleArray","bitmap","width","height","Error","intToRGBA","getPixelColor","r","g","b","widthAndHeight","setPixelColor","rgbaToInt","dec","toUpperCase","padStart"],"mappings":"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","file":"static/js/main.260783ba.chunk.js","sourcesContent":["import React from 'react'\nimport Grid from './components/Grid'\nimport { Container, Form, Button } from 'react-bootstrap'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast, ToastContainer } from 'react-toastify'\nimport ReactToPrint from 'react-to-print'\nimport Jimp from 'jimp/es'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './App.css'\nimport Header from './components/Header'\nimport Main from './components/Main'\nimport Buttons from './components/Buttons'\nimport Footer from './components/Footer'\nimport {\n  generateGrid, generateCoordinatesOrder, serializeGridData,\n  jimpToSerializedGridData, serializedGridDataToJimp\n} from './lib/util'\nimport Print from './components/Print'\n\nconst serializedGridDataGitHubn\nclass App extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      isAuthoring: false,\n      isFilling: false,\n      filledColor: 0x00000000,\n      emptyColor: 0xFFFFFFFF,\n      solvedColor: 0xFFFF00FF,\n      unsolvedColor: 0x808080FF\n    }\n\n    this.printableRef = React.createRef()\n\n    this.initializeGrid = this.initializeGrid.bind(this)\n    this.onCellEdit = this.onCellEdit.bind(this)\n    this.onCellChanged = this.onCellChanged.bind(this)\n    this.changeMode = this.changeMode.bind(this)\n    this.confirmChangeMode = this.confirmChangeMode.bind(this)\n    this.clear = this.clear.bind(this)\n    this.revealSolution = this.revealSolution.bind(this)\n    this.invert = this.invert.bind(this)\n    this.importImage = this.importImage.bind(this)\n    this.exportImage = this.exportImage.bind(this)\n    this.share = this.share.bind(this)\n    this.resizeCanvas = this.resizeCanvas.bind(this)\n    this.print = this.print.bind(this)\n  }\n\n  componentDidMount () {\n    const searchParams = new URLSearchParams(window.location.search)\n    const query = Object.fromEntries(searchParams.entries())\n\n    document.onselectstart = () => false\n\n    this.setState({\n      isAuthoring: (query.isAuthoring === 'true'),\n      size: this.initializeGrid(query.gridData)\n    })\n  }\n\n  initializeGrid (serializedGridData) {\n    let size = 8\n\n    if (serializedGridData) {\n      const deserializedSize = Math.sqrt(Math.sqrt(serializedGridData.length))\n\n      if (deserializedSize % 1 !== 0) {\n        toast.error('Grid must have a size of x^4.')\n        this.gridData = generateGrid(size, serializedGridDataGitHub)\n      } else if (deserializedSize < 3) {\n        toast.error('Grid can be no smaller than 3^4.')\n        this.gridData = generateGrid(size, serializedGridDataGitHub)\n      } else if (deserializedSize > 11) {\n        toast.error('Grid can be no larger than 11^4.')\n        this.gridData = generateGrid(size, serializedGridDataGitHub)\n      } else {\n        size = deserializedSize\n        this.gridData = generateGrid(size, serializedGridData)\n      }\n    } else {\n      this.gridData = generateGrid(size, serializedGridDataGitHub)\n    }\n\n    this.coordinatesOrder = generateCoordinatesOrder(size)\n\n    return size\n  }\n\n  onCellEdit (filled) {\n    this.setState({\n      isFilling: !filled\n    })\n  }\n\n  onCellChanged (gridY, gridX, subGridY, subGridX, value) {\n    this.gridData[gridY][gridX][subGridY][subGridX] = (value) ? 1 : 0\n  }\n\n  changeMode () {\n    const { isAuthoring } = this.state\n\n    if (isAuthoring) {\n      this.confirmChangeMode()\n    } else {\n      confirmAlert({\n        title: 'Confirmation',\n        message: 'Are you sure you want to edit the puzzle? This will undo your progress and reveal the solution!',\n        buttons: [\n          {\n            label: 'Yes',\n            onClick: this.confirmChangeMode\n          },\n          {\n            label: 'No'\n          }\n        ]\n      })\n    }\n  }\n\n  confirmChangeMode () {\n    const { isAuthoring } = this.state\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', serializeGridData(this.gridData))\n    searchParams.set('isAuthoring', JSON.stringify(!isAuthoring))\n    window.location.search = searchParams.toString()\n  }\n\n  clear () {\n    const { isAuthoring } = this.state\n\n    confirmAlert({\n      title: 'Confirmation',\n      message: `Are you sure you want to clear ${isAuthoring ? 'the canvas' : 'your progress'}? This cannot be undone.`,\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            const searchParams = new URLSearchParams(window.location.search)\n\n            if (isAuthoring) {\n              // Clear the canvas.\n              const serializedGridData = serializeGridData(this.gridData)\n              searchParams.set('gridData', '0'.repeat(serializedGridData.length))\n            } else {\n              // Clear your progress, not the grid data (actual puzzle contents).\n              searchParams.set('gridData', serializeGridData(this.gridData))\n            }\n\n            searchParams.set('isAuthoring', JSON.stringify(isAuthoring))\n            window.location.search = searchParams.toString()\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  revealSolution () {\n    confirmAlert({\n      title: 'Confirmation',\n      message: 'Are you sure you want to reveal the solution? This spoils the fun!',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            setTimeout(() => {\n              confirmAlert({\n                title: 'Solution',\n                childrenElement: () => {\n                  const { size, filledColor, emptyColor, solvedColor, unsolvedColor } = this.state\n\n                  if (!size) {\n                    return <></>\n                  }\n\n                  // TODO: Create an animation of filling the grid.\n                  return (\n                    <Grid\n                      isRevealing={true}\n                      isFilling={false}\n                      size={size}\n                      filledColor={filledColor}\n                      emptyColor={emptyColor}\n                      solvedColor={solvedColor}\n                      unsolvedColor={unsolvedColor}\n                      gridData={this.gridData}\n                    />\n                  )\n                },\n                buttons: [\n                  {\n                    label: 'Continue'\n                  }\n                ]\n              })\n            }, 0) // Required to make sure the first alert is dismissed before the next is revealed.\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  invert () {\n    const serializedGridData = serializeGridData(this.gridData)\n    let invertedSerializedGridData = ''\n\n    for (let i = 0; i < serializedGridData.length; i++) {\n      invertedSerializedGridData += (serializedGridData[i] === '1') ? '0' : '1'\n    }\n\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', invertedSerializedGridData)\n    window.location.search = searchParams.toString()\n  }\n\n  importImage (e) {\n    const file = e.target.files[0]\n    e.target.value = ''\n\n    confirmAlert({\n      title: 'Confirmation',\n      message: 'Are you sure you want to import this image? Your current canvas will be overwritten.',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            const reader = new FileReader()\n\n            // Closure to capture the file information.\n            reader.onload = ((_) => {\n              return async (e) => {\n                const jimpFile = await Jimp.read(Buffer.from(e.target.result))\n                const size = Math.pow(this.gridData.length, 2)\n\n                jimpFile\n                  .contrast(1)\n                  .resize(size, size)\n\n                const searchParams = new URLSearchParams(window.location.search)\n                searchParams.set('gridData', jimpToSerializedGridData(jimpFile))\n                window.location.search = searchParams.toString()\n              }\n            })(file)\n\n            reader.readAsArrayBuffer(file)\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  async exportImage () {\n    const { filledColor, emptyColor } = this.state\n    const image = serializedGridDataToJimp(serializeGridData(this.gridData), filledColor, emptyColor)\n    const u8 = await image.getBufferAsync(Jimp.MIME_PNG)\n\n    // https://medium.com/@koteswar.meesala/convert-array-buffer-to-base64-string-to-display-images-in-angular-7-4c443db242cd\n    const stringChar = u8.reduce((data, byte) => {\n      return data + String.fromCharCode(byte)\n    }, '')\n\n    const b64Encoded = btoa(stringChar)\n\n    confirmAlert({\n      title: 'Image',\n      childrenElement: () => {\n        return (\n          <>\n            Right-click and &quot;Save Image As&quot; to download the image.\n            <div><img src={`data:image/png;base64, ${b64Encoded}`} /></div>\n          </>\n        )\n      },\n      buttons: [\n        {\n          label: 'Continue'\n        }\n      ]\n    })\n  }\n\n  share () {\n    const { protocol, host, pathname } = window.location\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('isAuthoring', 'false')\n    searchParams.set('gridData', serializeGridData(this.gridData))\n    navigator.clipboard.writeText(`${protocol}//${host}${pathname}?${searchParams.toString()}`)\n    toast.success('URL copied to your clipboard!')\n  }\n\n  resizeCanvas (size) {\n    confirmAlert({\n      title: 'Confirmation',\n      message: 'Are you sure you want to resize? This will clear the canvas.',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            const searchParams = new URLSearchParams(window.location.search)\n            searchParams.set('gridData', '0'.repeat(Math.pow(size, 4)))\n            window.location.search = searchParams.toString()\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  print () {\n    this.setState({\n      gridDataToPrint: this.gridData\n    })\n\n    confirmAlert({\n      title: 'Print',\n      message: 'Click this button to print the puzzle. We recommend printing in Landscape mode. ',\n      childrenElement: () => (\n        <ReactToPrint\n          trigger={() => (\n            <Button>Print</Button>\n          )}\n          content={() => this.printableRef.current}\n        />\n      ),\n      buttons: [\n        {\n          label: 'Cancel'\n        }\n      ]\n    })\n  }\n\n  render () {\n    const {\n      isAuthoring, isFilling, size, filledColor,\n      emptyColor, solvedColor, unsolvedColor, gridDataToPrint\n    } = this.state\n\n    if (!size) {\n      return <></>\n    }\n\n    return (\n      <Container>\n        <ToastContainer />\n        <Header />\n\n        <Main\n          onCellEdit={this.onCellEdit}\n          onCellChanged={this.onCellChanged}\n          isAuthoring={isAuthoring}\n          isFilling={isFilling}\n          size={size}\n          filledColor={filledColor}\n          emptyColor={emptyColor}\n          solvedColor={solvedColor}\n          unsolvedColor={unsolvedColor}\n          gridData={this.gridData}\n          coordinatesOrder={this.coordinatesOrder}\n        />\n\n        <Form>\n          <Buttons\n            changeMode={this.changeMode}\n            clear={this.clear}\n            revealSolution={this.revealSolution}\n            invert={this.invert}\n            importImage={this.importImage}\n            exportImage={this.exportImage}\n            share={this.share}\n            resizeCanvas={this.resizeCanvas}\n            print={this.print}\n            isAuthoring={isAuthoring}\n            gridData={this.gridData}\n          />\n\n          <Footer />\n\n          <Print\n            size={size}\n            filledColor={filledColor}\n            emptyColor={emptyColor}\n            unsolvedColor={unsolvedColor}\n            gridData={gridDataToPrint}\n            coordinatesOrder={this.coordinatesOrder}\n            ref={this.printableRef}\n          />\n        </Form>\n      </Container>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Grid from './Grid'\nimport Coordinates from './Coordinates'\n\nclass Main extends React.Component {\n  render () {\n    const {\n      onCellEdit, onCellChanged, isAuthoring, isFilling, size,\n      filledColor, emptyColor, solvedColor, unsolvedColor, gridData,\n      coordinatesOrder\n    } = this.props\n\n    return (\n      <>\n        <div>\n          <div className=\"grid\">\n            <Grid\n              onCellEdit={onCellEdit}\n              onCellChanged={onCellChanged}\n              isAuthoring={isAuthoring}\n              isFilling={isFilling}\n              size={size}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={solvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={gridData}\n            />\n          </div>\n\n          {!isAuthoring && (\n            <Coordinates\n              size={size}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={solvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={gridData}\n              coordinatesOrder={coordinatesOrder}\n            />\n          )}\n        </div>\n      </>\n    )\n  }\n}\n\nMain.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  isAuthoring: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  size: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Main\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Row, Col, Button, Form, Dropdown, DropdownButton } from 'react-bootstrap'\n\nconst Buttons = props => {\n  const {\n    changeMode, clear, revealSolution, invert, importImage, exportImage,\n    share, resizeCanvas, print, isAuthoring, gridData\n  } = props\n\n  return (\n    <>\n      {isAuthoring && (\n        <>\n          <Row>\n            <Col>\n              <DropdownButton title=\"Resize Canvas\">\n                { /* Sizes allowed are 3-11 */ }\n                {Array(11).fill(0).map((_, i) => i + 1).filter(\n                  size => size >= 3 && size !== gridData.length\n                ).map(size => (\n                  <Dropdown.Item\n                    key={size}\n                    onSelect={() => resizeCanvas(size)}\n                  >\n                    {size}<sup>4</sup>\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n              <Button onClick={invert}>Invert</Button>\n            </Col>\n          </Row>\n\n          <Row>\n            <Form.Label>Import from Image</Form.Label>\n            <Form.Control\n              type=\"file\" name=\"files\"\n              accept=\".bmp, .gif, .jpg, .jpeg, .png, .tiff\"\n              onChange={importImage}\n            />\n          </Row>\n\n          <Row>\n            <Col>\n              <Button onClick={exportImage}>Export as Image</Button>\n            </Col>\n          </Row>\n        </>\n      )}\n\n      {!isAuthoring && (\n        <div>\n          <Row>\n            <Col>\n              <Form.Group className=\"mb-3\">\n                <Button variant=\"warning\" onClick={revealSolution}>Reveal Solution</Button>\n              </Form.Group>\n            </Col>\n          </Row>\n        </div>\n      )}\n\n      <Row>\n        <Col>\n          <Button variant=\"danger\" onClick={clear}>Clear</Button>\n          <Button variant=\"danger\" onClick={changeMode}>{(isAuthoring) ? 'Play' : 'Edit'}</Button>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Button onClick={print}>Print</Button>\n          <Button onClick={share}>Share</Button>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nButtons.propTypes = {\n  changeMode: PropTypes.func.isRequired,\n  clear: PropTypes.func.isRequired,\n  revealSolution: PropTypes.func.isRequired,\n  invert: PropTypes.func.isRequired,\n  importImage: PropTypes.func.isRequired,\n  exportImage: PropTypes.func.isRequired,\n  share: PropTypes.func.isRequired,\n  resizeCanvas: PropTypes.func.isRequired,\n  print: PropTypes.func.isRequired,\n  isAuthoring: PropTypes.bool,\n  gridData: PropTypes.array.isRequired\n}\n\nexport default Buttons\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Header from './Header'\nimport Grid from './Grid'\nimport Coordinates from './Coordinates'\nimport Footer from './Footer'\n\nclass Print extends React.Component {\n  render () {\n    const {\n      size, filledColor, emptyColor,\n      // Don't indicate which boxes are empty to begin with; always use unsolved color.\n      unsolvedColor, gridData, coordinatesOrder\n    } = this.props\n\n    if (!gridData) {\n      return <></>\n    }\n\n    return (\n      <div className=\"print\">\n        <Header />\n\n        {gridData && (\n          <>\n            <div className=\"grid\">\n              <Grid\n                size={size}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={unsolvedColor}\n                unsolvedColor={unsolvedColor}\n                gridData={gridData}\n              />\n            </div>\n\n            <Coordinates\n              size={size}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={unsolvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={gridData}\n              coordinatesOrder={coordinatesOrder}\n            />\n          </>\n        )}\n\n        <Footer />\n      </div>\n    )\n  }\n}\n\nPrint.propTypes = {\n  size: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Print\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SubGrid from './SubGrid'\nimport { getXLabel, getYLabel } from '../lib/util'\n\nconst Grid = props => {\n  const {\n    onCellEdit, onCellChanged, isAuthoring, isFilling, isRevealing,\n    size, filledColor, emptyColor, solvedColor, unsolvedColor, gridData\n  } = props\n\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <td></td>\n          {Array(size).fill().map((_, colIndex) => (\n            <td key={colIndex}>{getXLabel(colIndex)}</td>\n          ))}\n        </tr>\n\n        {Array(size).fill().map((_, rowIndex) => (\n          <tr key={rowIndex}>\n            <td>{getYLabel(rowIndex)}</td>\n            {Array(size).fill().map((_, colIndex) => (\n              <SubGrid\n                key={colIndex}\n                onCellEdit={onCellEdit}\n                onCellChanged={onCellChanged}\n                isAuthoring={isAuthoring}\n                isFilling={isFilling}\n                isRevealing={isRevealing}\n                size={size}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={solvedColor}\n                unsolvedColor={unsolvedColor}\n                gridY={rowIndex}\n                gridX={colIndex}\n                initialSubGridData={gridData[rowIndex][colIndex]}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nGrid.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  isAuthoring: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isRevealing: PropTypes.bool,\n  size: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired\n}\n\nexport default Grid\n","import React from 'react'\n\nconst Header = () => (\n  <>\n    <h1>Pixel Puzzles</h1>\n    <h4>Copy each square&apos;s pattern to the associated coordinates to reveal a secret image!</h4>\n    <h6>Fill the grid in your browser or print the puzzle to complete by hand. Edit the puzzle or generate your own using any image. Share puzzles with your friends and family!</h6>\n  </>\n)\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SubGrid from './SubGrid'\nimport { getCoordinateLabel } from '../lib/util'\n\nconst Coordinates = props => {\n  const { size, filledColor, emptyColor, solvedColor, unsolvedColor, gridData, coordinatesOrder } = props\n\n  return (\n    coordinatesOrder.map((coordinates, index) => {\n      const { x, y } = coordinates\n\n      return (\n        <table className=\"coordinates\" key={index}>\n          <tbody>\n            <tr>\n              <td>{getCoordinateLabel(x, y)}</td>\n            </tr>\n            <tr>\n              <SubGrid\n                isCoordinate={true}\n                size={size}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={solvedColor}\n                unsolvedColor={unsolvedColor}\n                gridY={y}\n                gridX={x}\n                initialSubGridData={gridData[y][x]}\n              />\n            </tr>\n          </tbody>\n        </table>\n      )\n    })\n  )\n}\n\nCoordinates.propTypes = {\n  size: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Coordinates\n","import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n\nconst Footer = () => (\n  <Row className=\"footer\">\n    <Col>\n      Created by <a href=\"https://github.com/BrandonE\" target=\"_blank\" rel=\"noreferrer\">Brandon Evans</a>.\n      Inspired by <a href=\"https://web.archive.org/web/20111027002447/http://www.tipstricks.com/puzzles.html\" target=\"_blank\" rel=\"noreferrer\">Pencil Puzzles</a> from <a href=\"https://en.wikipedia.org/wiki/Tips_%26_Tricks_(magazine)\">Tips &amp; Tricks Magazine</a>\n      &nbsp; <a href=\"https://github.com/BrandonE/pixel-puzzles\" target=\"_blank\" rel=\"noreferrer\"><FontAwesomeIcon icon={faGithub}></FontAwesomeIcon></a>\n    </Col>\n  </Row>\n)\n\nexport default Footer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { decimalToHex } from '../lib/util'\n\nconst Cell = props => {\n  const {\n    onCellEdit, onCellChanged, filledColor, emptyColor,\n    gridY, gridX, subGridY, subGridX, isFilled\n  } = props\n\n  return (\n    <td\n      className=\"cell\"\n\n      style={{\n        backgroundColor: decimalToHex((isFilled) ? filledColor : emptyColor)\n      }}\n\n      onPointerDown={() => {\n        const { isFilled } = props\n\n        if (onCellEdit) {\n          onCellEdit(isFilled)\n        }\n\n        if (onCellChanged) {\n          onCellChanged(gridY, gridX, subGridY, subGridX, !isFilled)\n        }\n      }}\n\n      onMouseEnter={e => {\n        const { isFilling } = props\n\n        if (onCellChanged && e.buttons === undefined ? e.which === 1 : e.buttons === 1) {\n          onCellChanged(gridY, gridX, subGridY, subGridX, isFilling)\n        }\n      }}\n    >\n    </td>\n  )\n}\n\nCell.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  isFilling: PropTypes.bool,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  gridY: PropTypes.number.isRequired,\n  gridX: PropTypes.number.isRequired,\n  subGridY: PropTypes.number.isRequired,\n  subGridX: PropTypes.number.isRequired,\n  isFilled: PropTypes.number.isRequired\n}\n\nexport default Cell\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Cell from './Cell'\nimport { decimalToHex } from '../lib/util'\n\nclass SubGrid extends React.Component {\n  constructor (props) {\n    super()\n    const { isAuthoring, isCoordinate, isRevealing, size } = props\n    const { initialSubGridData } = props\n\n    const subGridData = []\n    const subGridFilling = []\n\n    for (let subGridY = 0; subGridY < size; subGridY++) {\n      const subGridDataRow = []\n      const subGridFillingRow = []\n\n      for (let subGridX = 0; subGridX < size; subGridX++) {\n        if (initialSubGridData) {\n          const initialValue = initialSubGridData[subGridY][subGridX]\n\n          subGridDataRow.push(initialValue)\n\n          if (isAuthoring || isCoordinate) {\n            subGridFillingRow.push(initialValue)\n          } else {\n            subGridFillingRow.push(0)\n          }\n        } else {\n          subGridDataRow.push(0)\n          subGridFillingRow.push(0)\n        }\n      }\n\n      subGridData.push(subGridDataRow)\n      subGridFilling.push(subGridFillingRow)\n    }\n\n    this.state = {\n      subGridData,\n      subGridFilling\n    }\n\n    if (isRevealing) {\n      setTimeout(() => {\n        this.setState({\n          subGridFilling: subGridData\n        })\n      }, Math.random() * 1000)\n    }\n\n    this.onCellChanged = this.onCellChanged.bind(this)\n    this.isSolved = this.isSolved.bind(this)\n  }\n\n  onCellChanged (gridY, gridX, subGridY, subGridX, value) {\n    const { onCellChanged, isAuthoring, isCoordinate } = this.props\n    const { subGridData, subGridFilling } = this.state\n\n    if (!isCoordinate && onCellChanged) {\n      if (isAuthoring) {\n        subGridData[subGridY][subGridX] = (value) ? 1 : 0\n        subGridFilling[subGridY][subGridX] = subGridData[subGridY][subGridX]\n        onCellChanged(gridY, gridX, subGridY, subGridX, value)\n      }\n\n      subGridFilling[subGridY][subGridX] = (value) ? 1 : 0\n    }\n\n    this.setState({\n      subGridData,\n      subGridFilling\n    })\n  }\n\n  isSolved () {\n    const { isAuthoring, isCoordinate } = this.props\n    const { subGridData, subGridFilling } = this.state\n    return (!isAuthoring && !isCoordinate && JSON.stringify(subGridData) === JSON.stringify(subGridFilling))\n  }\n\n  render () {\n    const {\n      onCellEdit, isFilling, filledColor, emptyColor,\n      solvedColor, unsolvedColor, gridY, gridX\n    } = this.props\n    const { subGridFilling } = this.state\n\n    return (\n      <td\n        className=\"subGrid\"\n        style={{ border: `1px solid ${decimalToHex(this.isSolved() ? solvedColor : unsolvedColor)}` }}\n      >\n        <table>\n          <tbody>\n            {subGridFilling.map((subGridFillingRow, rowIndex) => (\n              <tr key={rowIndex}>\n                {subGridFillingRow.map((isFilled, colIndex) => (\n                  <Cell\n                    key={colIndex}\n                    onCellEdit={onCellEdit}\n                    onCellChanged={this.onCellChanged}\n                    isFilling={isFilling}\n                    filledColor={filledColor}\n                    emptyColor={emptyColor}\n                    gridY={gridY}\n                    gridX={gridX}\n                    subGridY={rowIndex}\n                    subGridX={colIndex}\n                    isFilled={isFilled}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </td>\n    )\n  }\n}\n\nSubGrid.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  isAuthoring: PropTypes.bool,\n  isCoordinate: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isRevealing: PropTypes.bool,\n  size: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridY: PropTypes.number.isRequired,\n  gridX: PropTypes.number.isRequired,\n  initialSubGridData: PropTypes.array\n}\n\nexport default SubGrid\n","import Jimp from 'jimp/es'\n\n// https://stackoverflow.com/a/10142256/12055600\nexport const shuffleArray = (arr) => {\n  let i = arr.length\n  let j\n  let temp\n\n  if (i === 0) {\n    return arr\n  }\n\n  while (--i) {\n    j = Math.floor(Math.random() * (i + 1))\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n  }\n\n  return arr\n}\n\nexport const serializeGridData = gridData => gridData.flat().flat().flat().join('')\n\nexport const generateGrid = (size, serializedGridData) => {\n  const gridData = []\n  let count = 0\n\n  for (let gridY = 0; gridY < size; gridY++) {\n    const gridRow = []\n\n    for (let gridX = 0; gridX < size; gridX++) {\n      const subGridData = []\n\n      for (let subGridY = 0; subGridY < size; subGridY++) {\n        const subGridRow = []\n\n        for (let subGridX = 0; subGridX < size; subGridX++) {\n          const value = (serializedGridData) ? serializedGridData[count] : '0'\n          subGridRow.push((value === '1') ? 1 : 0)\n          count++\n        }\n\n        subGridData.push(subGridRow)\n      }\n\n      gridRow.push(subGridData)\n    }\n\n    gridData.push(gridRow)\n  }\n\n  return gridData\n}\n\nexport const generateCoordinatesOrder = size => {\n  const coordinatesOrder = []\n\n  for (let gridY = 0; gridY < size; gridY++) {\n    for (let gridX = 0; gridX < size; gridX++) {\n      coordinatesOrder.push({\n        x: gridX,\n        y: gridY\n      })\n    }\n  }\n\n  return shuffleArray(coordinatesOrder)\n}\n\nexport const jimpToSerializedGridData = jimpFile => {\n  let serializedGridData = ''\n  const { width, height } = jimpFile.bitmap\n  const size = Math.sqrt(Math.sqrt(width * height))\n\n  if (size % 1 !== 0) {\n    // This should never be thrown.\n    throw new Error('Invalid image size.')\n  }\n\n  for (let gridY = 0; gridY < size; gridY++) {\n    for (let gridX = 0; gridX < size; gridX++) {\n      for (let subGridY = 0; subGridY < size; subGridY++) {\n        for (let subGridX = 0; subGridX < size; subGridX++) {\n          const x = gridX * size + subGridX\n          const y = gridY * size + subGridY\n          const { r, g, b, a } = Jimp.intToRGBA(jimpFile.getPixelColor(x, y))\n          const rgb = r * g * b\n          const value = (rgb >= ((255 * 255 * 255) / 2) || a === 0) ? '0' : '1'\n          serializedGridData += value\n        }\n      }\n    }\n  }\n\n  return serializedGridData\n}\n\nexport const serializedGridDataToJimp = (serializedGridData, filledColor, emptyColor) => {\n  const widthAndHeight = Math.sqrt(serializedGridData.length)\n  const size = Math.sqrt(widthAndHeight)\n\n  if (size % 1 !== 0) {\n    // This should never be thrown.\n    throw new Error('Invalid image size.')\n  }\n\n  const jimpFile = new Jimp(widthAndHeight, widthAndHeight)\n  let count = 0\n\n  for (let gridY = 0; gridY < size; gridY++) {\n    for (let gridX = 0; gridX < size; gridX++) {\n      for (let subGridY = 0; subGridY < size; subGridY++) {\n        for (let subGridX = 0; subGridX < size; subGridX++) {\n          const x = gridX * size + subGridX\n          const y = gridY * size + subGridY\n          const { r, g, b } = Jimp.intToRGBA((serializedGridData[count] === '1') ? filledColor : emptyColor)\n\n          jimpFile.setPixelColor(Jimp.rgbaToInt(r, g, b, 255), x, y)\n\n          count++\n        }\n      }\n    }\n  }\n\n  return jimpFile\n}\n\nexport const decimalToHex = dec => `#${dec.toString(16).toUpperCase().padStart(6, '0')}`\nexport const getXLabel = x => 'ABCDEFGHIJK'[x]\nexport const getYLabel = y => y + 1\nexport const getCoordinateLabel = (x, y) => getXLabel(x) + getYLabel(y)\n"],"sourceRoot":""}