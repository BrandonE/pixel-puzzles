{"version":3,"sources":["lib/util.js","App.js","components/Main.js","components/Buttons.js","components/Print.js","reportWebVitals.js","index.js","components/Grid.js","components/Header.js","components/Coordinates.js","components/Footer.js","components/Cell.js","components/SubGrid.js"],"names":["serializeGridData","gridData","flat","join","generateGrid","gridSize","subGridSize","serializedGridData","count","gridY","gridRow","gridX","subGridData","subGridY","subGridRow","subGridX","value","push","generateCoordinatesOrder","coordinatesOrder","x","y","arr","j","temp","i","length","Math","floor","random","shuffleArray","jimpToSerializedGridData","jimpFile","bitmap","width","height","gridWidthAndHeight","Error","Jimp","intToRGBA","getPixelColor","r","g","b","a","gridDataToJimp","filledColor","emptyColor","setPixelColor","rgbaToInt","decimalToHex","dec","toString","toUpperCase","padStart","getXLabel","getYLabel","getCoordinateLabel","App","state","isAuthoring","isFilling","solvedColor","unsolvedColor","printableRef","React","createRef","initializeGrid","bind","onCellEdit","onCellChanged","changeMode","confirmChangeMode","clear","revealSolution","invert","importImage","exportImage","share","resizeGrids","print","searchParams","URLSearchParams","window","location","search","query","Object","fromEntries","entries","parseInt","document","onselectstart","this","setState","filled","confirmAlert","title","message","buttons","label","onClick","set","JSON","stringify","setTimeout","childrenElement","isRevealing","invertedSerializedGridData","e","file","target","files","confirmImportImage","stretch","backgroundFilled","reader","FileReader","onload","read","Buffer","from","result","largerDimension","background","contain","contrast","resize","readAsArrayBuffer","image","getBufferAsync","MIME_PNG","u8","stringChar","reduce","data","byte","String","fromCharCode","b64Encoded","btoa","src","protocol","host","pathname","navigator","clipboard","writeText","toast","success","gridDataToPrint","trigger","content","current","ref","Component","Main","props","className","Buttons","Array","fill","map","_","filter","size","Item","onSelect","Label","Control","type","name","accept","onChange","Group","variant","Print","showUrl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","Grid","colIndex","rowIndex","initialSubGridData","Header","Coordinates","coordinates","index","isCoordinate","Footer","href","rel","icon","faGithub","Cell","isFilled","style","backgroundColor","onPointerDown","onMouseEnter","undefined","which","SubGrid","subGridFilling","subGridDataRow","subGridFillingRow","initialValue","isSolved","border","touchAction"],"mappings":"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","file":"static/js/main.4b582843.chunk.js","sourcesContent":["import Jimp from 'jimp/es'\n\n// https://stackoverflow.com/a/10142256/12055600\nexport const shuffleArray = (arr) => {\n  let i = arr.length\n  let j\n  let temp\n\n  if (i === 0) {\n    return arr\n  }\n\n  while (--i) {\n    j = Math.floor(Math.random() * (i + 1))\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n  }\n\n  return arr\n}\n\nexport const serializeGridData = gridData => gridData.flat().flat().flat().join('')\n\nexport const generateGrid = (gridSize, subGridSize, serializedGridData) => {\n  const gridData = []\n  let count = 0\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    const gridRow = []\n\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      const subGridData = []\n\n      for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n        const subGridRow = []\n\n        for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n          const value = (serializedGridData) ? serializedGridData[count] : '0'\n          subGridRow.push((value === '1') ? 1 : 0)\n          count++\n        }\n\n        subGridData.push(subGridRow)\n      }\n\n      gridRow.push(subGridData)\n    }\n\n    gridData.push(gridRow)\n  }\n\n  return gridData\n}\n\nexport const generateCoordinatesOrder = gridSize => {\n  const coordinatesOrder = []\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      coordinatesOrder.push({\n        x: gridX,\n        y: gridY\n      })\n    }\n  }\n\n  return shuffleArray(coordinatesOrder)\n}\n\nexport const jimpToSerializedGridData = (jimpFile, gridSize, subGridSize) => {\n  let serializedGridData = ''\n  const { width, height } = jimpFile.bitmap\n  const gridWidthAndHeight = gridSize * subGridSize\n\n  if (gridWidthAndHeight !== width || gridWidthAndHeight !== height) {\n    // This should never be thrown.\n    throw new Error('Invalid image size.')\n  }\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n        for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n          const x = gridX * subGridSize + subGridX\n          const y = gridY * subGridSize + subGridY\n          const { r, g, b, a } = Jimp.intToRGBA(jimpFile.getPixelColor(x, y))\n          const rgb = r * g * b\n          const value = (rgb >= ((255 * 255 * 255) / 2) || a === 0) ? '0' : '1'\n          serializedGridData += value\n        }\n      }\n    }\n  }\n\n  return serializedGridData\n}\n\nexport const gridDataToJimp = (gridData, filledColor, emptyColor) => {\n  const serializedGridData = serializeGridData(gridData)\n  const gridSize = gridData.length\n  const subGridSize = gridData[0][0].length\n  const gridWidthAndHeight = gridSize * subGridSize\n\n  const jimpFile = new Jimp(gridWidthAndHeight, gridWidthAndHeight)\n  let count = 0\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n        for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n          const x = gridX * subGridSize + subGridX\n          const y = gridY * subGridSize + subGridY\n          const { r, g, b } = Jimp.intToRGBA((serializedGridData[count] === '1') ? filledColor : emptyColor)\n\n          jimpFile.setPixelColor(Jimp.rgbaToInt(r, g, b, 255), x, y)\n\n          count++\n        }\n      }\n    }\n  }\n\n  return jimpFile\n}\n\nexport const decimalToHex = dec => `#${dec.toString(16).toUpperCase().padStart(6, '0')}`\nexport const getXLabel = x => 'ABCDEFGHIJK'[x]\nexport const getYLabel = y => y + 1\nexport const getCoordinateLabel = (x, y) => getXLabel(x) + getYLabel(y)\n","import React from 'react'\nimport Grid from './components/Grid'\nimport { Form, Button } from 'react-bootstrap'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast, ToastContainer } from 'react-toastify'\nimport ReactToPrint from 'react-to-print'\nimport Jimp from 'jimp/es'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './App.css'\nimport Header from './components/Header'\nimport Main from './components/Main'\nimport Buttons from './components/Buttons'\nimport Footer from './components/Footer'\nimport {\n  generateGrid, generateCoordinatesOrder, serializeGridData,\n  jimpToSerializedGridData, gridDataToJimp\n} from './lib/util'\nimport Print from './components/Print'\n\nconst serializedGridDataGitHubn\nconst defaultGridSize = 8\nconst defaultSubGridSize = 5\n\nclass App extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      isAuthoring: false,\n      // TODO: Move this down to Grid to avoid re-rendering coordinates and make things faster.\n      isFilling: false,\n      filledColor: 0x00000000,\n      emptyColor: 0xFFFFFFFF,\n      solvedColor: 0xFFFF00FF,\n      unsolvedColor: 0x808080FF\n    }\n\n    this.printableRef = React.createRef()\n\n    this.initializeGrid = this.initializeGrid.bind(this)\n    this.onCellEdit = this.onCellEdit.bind(this)\n    this.onCellChanged = this.onCellChanged.bind(this)\n    this.changeMode = this.changeMode.bind(this)\n    this.confirmChangeMode = this.confirmChangeMode.bind(this)\n    this.clear = this.clear.bind(this)\n    this.revealSolution = this.revealSolution.bind(this)\n    this.invert = this.invert.bind(this)\n    this.importImage = this.importImage.bind(this)\n    this.exportImage = this.exportImage.bind(this)\n    this.share = this.share.bind(this)\n    this.resizeGrids = this.resizeGrids.bind(this)\n    this.print = this.print.bind(this)\n  }\n\n  componentDidMount () {\n    const searchParams = new URLSearchParams(window.location.search)\n    const query = Object.fromEntries(searchParams.entries())\n    let gridSize = parseInt(query.gridSize, 10)\n    let subGridSize = parseInt(query.subGridSize, 10)\n\n    if (!gridSize || gridSize < 2 || gridSize > 9) {\n      gridSize = defaultGridSize\n    }\n\n    if (!subGridSize || subGridSize < 2 || subGridSize > 9) {\n      subGridSize = defaultSubGridSize\n    }\n\n    document.onselectstart = () => false\n\n    this.initializeGrid(gridSize, subGridSize, query.gridData)\n\n    this.setState({\n      isAuthoring: (query.isAuthoring === 'true'),\n      gridSize,\n      subGridSize\n    })\n  }\n\n  initializeGrid (gridSize, subGridSize, serializedGridData) {\n    if (!serializedGridData && gridSize === defaultGridSize && subGridSize === defaultSubGridSize) {\n      serializedGridData = serializedGridDataGitHub\n    }\n\n    this.gridData = generateGrid(gridSize, subGridSize, serializedGridData)\n    this.coordinatesOrder = generateCoordinatesOrder(gridSize)\n  }\n\n  onCellEdit (filled) {\n    this.setState({\n      isFilling: !filled\n    })\n  }\n\n  onCellChanged (gridY, gridX, subGridY, subGridX, value) {\n    this.gridData[gridY][gridX][subGridY][subGridX] = (value) ? 1 : 0\n  }\n\n  changeMode () {\n    const { isAuthoring } = this.state\n\n    if (isAuthoring) {\n      this.confirmChangeMode()\n    } else {\n      confirmAlert({\n        title: 'Confirmation',\n        message: 'Are you sure you want to edit the puzzle? This will undo your progress and reveal the solution!',\n        buttons: [\n          {\n            label: 'Yes',\n            onClick: this.confirmChangeMode\n          },\n          {\n            label: 'No'\n          }\n        ]\n      })\n    }\n  }\n\n  confirmChangeMode () {\n    const { isAuthoring } = this.state\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', serializeGridData(this.gridData))\n    searchParams.set('isAuthoring', JSON.stringify(!isAuthoring))\n    window.location.search = searchParams.toString()\n  }\n\n  clear () {\n    const { isAuthoring } = this.state\n\n    confirmAlert({\n      title: 'Confirmation',\n      message: `Are you sure you want to clear ${isAuthoring ? 'the canvas' : 'your progress'}? This cannot be undone.`,\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            const searchParams = new URLSearchParams(window.location.search)\n\n            if (isAuthoring) {\n              // Clear the canvas.\n              searchParams.set('gridData', '0')\n            } else {\n              // Clear your progress, not the grid data (actual puzzle contents).\n              searchParams.set('gridData', serializeGridData(this.gridData))\n            }\n\n            searchParams.set('isAuthoring', JSON.stringify(isAuthoring))\n            window.location.search = searchParams.toString()\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  revealSolution () {\n    confirmAlert({\n      title: 'Confirmation',\n      message: 'Are you sure you want to reveal the solution? This spoils the fun!',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            setTimeout(() => {\n              confirmAlert({\n                title: 'Solution',\n                childrenElement: () => {\n                  const { gridSize, subGridSize, filledColor, emptyColor, solvedColor, unsolvedColor } = this.state\n\n                  if (!this.gridData) {\n                    return <></>\n                  }\n\n                  return (\n                    <Grid\n                      isRevealing={true}\n                      isFilling={false}\n                      gridSize={gridSize}\n                      subGridSize={subGridSize}\n                      filledColor={filledColor}\n                      emptyColor={emptyColor}\n                      solvedColor={solvedColor}\n                      unsolvedColor={unsolvedColor}\n                      gridData={this.gridData}\n                    />\n                  )\n                },\n                buttons: [\n                  {\n                    label: 'Continue'\n                  }\n                ]\n              })\n            }, 0) // Required to make sure the first alert is dismissed before the next is revealed.\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  invert () {\n    const serializedGridData = serializeGridData(this.gridData)\n    let invertedSerializedGridData = ''\n\n    for (let i = 0; i < serializedGridData.length; i++) {\n      invertedSerializedGridData += (serializedGridData[i] === '1') ? '0' : '1'\n    }\n\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', invertedSerializedGridData)\n    window.location.search = searchParams.toString()\n  }\n\n  importImage (e) {\n    const file = e.target.files[0]\n    e.target.value = ''\n\n    confirmAlert({\n      title: 'Confirmation',\n      message: 'Are you sure you want to import this image? Your current canvas will be overwritten.',\n      buttons: [\n        {\n          label: 'Stretch to Fit',\n          onClick: () => this.confirmImportImage(file, true)\n        },\n        {\n          label: 'Resize Canvas',\n          onClick: () => this.confirmImportImage(file, false, false)\n        },\n        {\n          label: 'Cancel'\n        }\n      ]\n    })\n  }\n\n  confirmImportImage (file, stretch, backgroundFilled) {\n    const reader = new FileReader()\n\n    // Closure to capture the file information.\n    reader.onload = ((_) => {\n      return async (e) => {\n        const jimpFile = await Jimp.read(Buffer.from(e.target.result))\n        const gridSize = this.gridData.length\n        const subGridSize = this.gridData[0][0].length\n        const gridWidthAndHeight = gridSize * subGridSize\n\n        if (!stretch) {\n          const { width, height } = jimpFile.bitmap\n          const largerDimension = (width > height) ? width : height\n\n          jimpFile\n            .background((backgroundFilled) ? 0x00000000 : 0xFFFFFFFF)\n            .contain(largerDimension, largerDimension)\n        }\n\n        jimpFile\n          .contrast(1)\n          .resize(gridWidthAndHeight, gridWidthAndHeight)\n\n        const searchParams = new URLSearchParams(window.location.search)\n        searchParams.set('gridData', jimpToSerializedGridData(jimpFile, gridSize, subGridSize))\n        window.location.search = searchParams.toString()\n      }\n    })(file)\n\n    reader.readAsArrayBuffer(file)\n  }\n\n  async exportImage () {\n    const { filledColor, emptyColor } = this.state\n    const image = gridDataToJimp(this.gridData, filledColor, emptyColor)\n    const u8 = await image.getBufferAsync(Jimp.MIME_PNG)\n\n    // https://medium.com/@koteswar.meesala/convert-array-buffer-to-base64-string-to-display-images-in-angular-7-4c443db242cd\n    const stringChar = u8.reduce((data, byte) => {\n      return data + String.fromCharCode(byte)\n    }, '')\n\n    const b64Encoded = btoa(stringChar)\n\n    confirmAlert({\n      title: 'Image',\n      childrenElement: () => {\n        return (\n          <>\n            Right-click and &quot;Save Image As&quot; to download the image.\n            <div><img src={`data:image/png;base64, ${b64Encoded}`} /></div>\n          </>\n        )\n      },\n      buttons: [\n        {\n          label: 'Continue'\n        }\n      ]\n    })\n  }\n\n  share () {\n    const { protocol, host, pathname } = window.location\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('isAuthoring', 'false')\n    searchParams.set('gridData', serializeGridData(this.gridData))\n    navigator.clipboard.writeText(`${protocol}//${host}${pathname}?${searchParams.toString()}`)\n    toast.success('URL copied to your clipboard!')\n  }\n\n  resizeGrids (gridSize, subGridSize) {\n    confirmAlert({\n      title: 'Confirmation',\n      message: 'Are you sure you want to resize? This will clear the canvas.',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            const searchParams = new URLSearchParams(window.location.search)\n            searchParams.set('gridSize', gridSize)\n            searchParams.set('subGridSize', subGridSize)\n            searchParams.set('gridData', '0')\n            window.location.search = searchParams.toString()\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  print () {\n    this.setState({\n      gridDataToPrint: this.gridData\n    })\n\n    confirmAlert({\n      title: 'Print',\n      message: 'Click this button to print the puzzle. ',\n      childrenElement: () => (\n        <ReactToPrint\n          trigger={() => (\n            <Button>Print</Button>\n          )}\n          content={() => this.printableRef.current}\n        />\n      ),\n      buttons: [\n        {\n          label: 'Cancel'\n        }\n      ]\n    })\n  }\n\n  render () {\n    const {\n      isAuthoring, isFilling, gridSize, subGridSize, filledColor,\n      emptyColor, solvedColor, unsolvedColor, gridDataToPrint\n    } = this.state\n\n    if (!this.gridData) {\n      return <></>\n    }\n\n    return (\n      <>\n        <ToastContainer />\n        <Header />\n\n        <Main\n          onCellEdit={this.onCellEdit}\n          onCellChanged={this.onCellChanged}\n          isAuthoring={isAuthoring}\n          isFilling={isFilling}\n          gridSize={gridSize}\n          subGridSize={subGridSize}\n          filledColor={filledColor}\n          emptyColor={emptyColor}\n          solvedColor={solvedColor}\n          unsolvedColor={unsolvedColor}\n          gridData={this.gridData}\n          coordinatesOrder={this.coordinatesOrder}\n        />\n\n        <Form>\n          <Buttons\n            changeMode={this.changeMode}\n            clear={this.clear}\n            revealSolution={this.revealSolution}\n            invert={this.invert}\n            importImage={this.importImage}\n            exportImage={this.exportImage}\n            share={this.share}\n            resizeGrids={this.resizeGrids}\n            print={this.print}\n            isAuthoring={isAuthoring}\n            gridData={this.gridData}\n          />\n\n          <Footer />\n\n          <Print\n            gridSize={gridSize}\n            subGridSize={subGridSize}\n            filledColor={filledColor}\n            emptyColor={emptyColor}\n            unsolvedColor={unsolvedColor}\n            gridData={gridDataToPrint}\n            coordinatesOrder={this.coordinatesOrder}\n            ref={this.printableRef}\n          />\n        </Form>\n      </>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Grid from './Grid'\nimport Coordinates from './Coordinates'\n\nclass Main extends React.Component {\n  render () {\n    const {\n      onCellEdit, onCellChanged, isAuthoring, isFilling, gridSize, subGridSize,\n      filledColor, emptyColor, solvedColor, unsolvedColor, gridData,\n      coordinatesOrder\n    } = this.props\n\n    return (\n      <>\n        <div>\n          <div className=\"grid\">\n            <Grid\n              onCellEdit={onCellEdit}\n              onCellChanged={onCellChanged}\n              isAuthoring={isAuthoring}\n              isFilling={isFilling}\n              gridSize={gridSize}\n              subGridSize={subGridSize}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={solvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={gridData}\n            />\n          </div>\n\n          {!isAuthoring && (\n            <Coordinates\n              subGridSize={subGridSize}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={solvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={gridData}\n              coordinatesOrder={coordinatesOrder}\n            />\n          )}\n        </div>\n      </>\n    )\n  }\n}\n\nMain.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  isAuthoring: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Main\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Row, Col, Button, Form, Dropdown, DropdownButton } from 'react-bootstrap'\n\nconst Buttons = props => {\n  const {\n    changeMode, clear, revealSolution, invert, importImage, exportImage,\n    share, resizeGrids, print, isAuthoring, gridData\n  } = props\n\n  const gridSize = gridData.length\n  const subGridSize = gridData[0][0].length\n\n  return (\n    <>\n      {isAuthoring && (\n        <>\n          <Row>\n            <Col>\n              <DropdownButton title=\"Resize Grid\">\n                { /* Sizes allowed are 2-9 */ }\n                {Array(9).fill(0).map((_, i) => i + 1).filter(\n                  size => size >= 2 && size !== gridSize\n                ).map(size => (\n                  <Dropdown.Item\n                    key={size}\n                    onSelect={() => resizeGrids(size, subGridSize)}\n                  >\n                    {size}x{size}\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n\n              <DropdownButton title=\"Resize Sub-Grid\">\n                { /* Sizes allowed are 2-9 */ }\n                {Array(9).fill(0).map((_, i) => i + 1).filter(\n                  size => size >= 2 && size !== subGridSize\n                ).map(size => (\n                  <Dropdown.Item\n                    key={size}\n                    onSelect={() => resizeGrids(gridSize, size)}\n                  >\n                    {size}x{size}\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n              <Button onClick={invert}>Invert</Button>\n            </Col>\n          </Row>\n\n          <Row>\n            <Form.Label>Import from Image</Form.Label>\n            <Form.Control\n              type=\"file\" name=\"files\"\n              accept=\".bmp, .gif, .jpg, .jpeg, .png, .tiff\"\n              onChange={importImage}\n            />\n          </Row>\n\n          <Row>\n            <Col>\n              <Button onClick={exportImage}>Export as Image</Button>\n            </Col>\n          </Row>\n        </>\n      )}\n\n      {!isAuthoring && (\n        <div>\n          <Row>\n            <Col>\n              <Form.Group className=\"mb-3\">\n                <Button variant=\"warning\" onClick={revealSolution}>Reveal Solution</Button>\n              </Form.Group>\n            </Col>\n          </Row>\n        </div>\n      )}\n\n      <Row>\n        <Col>\n          <Button variant=\"danger\" onClick={clear}>Clear</Button>\n          <Button variant=\"danger\" onClick={changeMode}>{(isAuthoring) ? 'Play' : 'Edit'}</Button>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Button onClick={print}>Print</Button>\n          <Button onClick={share}>Share</Button>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nButtons.propTypes = {\n  changeMode: PropTypes.func.isRequired,\n  clear: PropTypes.func.isRequired,\n  revealSolution: PropTypes.func.isRequired,\n  invert: PropTypes.func.isRequired,\n  importImage: PropTypes.func.isRequired,\n  exportImage: PropTypes.func.isRequired,\n  share: PropTypes.func.isRequired,\n  resizeGrids: PropTypes.func.isRequired,\n  print: PropTypes.func.isRequired,\n  isAuthoring: PropTypes.bool,\n  gridData: PropTypes.array.isRequired\n}\n\nexport default Buttons\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Header from './Header'\nimport Grid from './Grid'\nimport Coordinates from './Coordinates'\nimport Footer from './Footer'\n\nclass Print extends React.Component {\n  render () {\n    const {\n      gridSize, subGridSize, filledColor, emptyColor,\n      // Don't indicate which boxes are empty to begin with; always use unsolved color.\n      unsolvedColor, gridData, coordinatesOrder\n    } = this.props\n\n    if (!gridData) {\n      return <></>\n    }\n\n    return (\n      <div className=\"print\">\n        <Header showUrl={true} />\n\n        {gridData && (\n          <>\n            <div className=\"grid\">\n              <Grid\n                gridSize={gridSize}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={unsolvedColor}\n                unsolvedColor={unsolvedColor}\n                gridData={gridData}\n              />\n            </div>\n\n            <Coordinates\n              subGridSize={subGridSize}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={unsolvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={gridData}\n              coordinatesOrder={coordinatesOrder}\n            />\n          </>\n        )}\n\n        <Footer />\n      </div>\n    )\n  }\n}\n\nPrint.propTypes = {\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Print\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SubGrid from './SubGrid'\nimport { getXLabel, getYLabel } from '../lib/util'\n\nconst Grid = props => {\n  const {\n    onCellEdit, onCellChanged, isAuthoring, isFilling, isRevealing,\n    gridSize, subGridSize, filledColor, emptyColor, solvedColor, unsolvedColor, gridData\n  } = props\n\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <td></td>\n          {Array(gridSize).fill().map((_, colIndex) => (\n            <td key={colIndex}>{getXLabel(colIndex)}</td>\n          ))}\n        </tr>\n\n        {Array(gridSize).fill().map((_, rowIndex) => (\n          <tr key={rowIndex}>\n            <td>{getYLabel(rowIndex)}</td>\n            {Array(gridSize).fill().map((_, colIndex) => (\n              <SubGrid\n                key={colIndex}\n                onCellEdit={onCellEdit}\n                onCellChanged={onCellChanged}\n                isAuthoring={isAuthoring}\n                isFilling={isFilling}\n                isRevealing={isRevealing}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={solvedColor}\n                unsolvedColor={unsolvedColor}\n                gridY={rowIndex}\n                gridX={colIndex}\n                initialSubGridData={gridData[rowIndex][colIndex]}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nGrid.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  isAuthoring: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isRevealing: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired\n}\n\nexport default Grid\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Header = props => (\n  <>\n    <h1>Pixel Puzzles</h1>\n    <h4>Copy each square&apos;s pattern to the associated coordinates to reveal a secret image!</h4>\n    <h6>Fill the grid in your browser or print the puzzle to complete by hand. Edit the puzzle or generate your own using any image. Share puzzles with your friends and family! {props.showUrl && <>https://brandone.github.io/pixel-puzzles/</>}</h6>\n  </>\n)\n\nHeader.propTypes = {\n  showUrl: PropTypes.bool\n}\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SubGrid from './SubGrid'\nimport { getCoordinateLabel } from '../lib/util'\n\nconst Coordinates = props => {\n  const { subGridSize, filledColor, emptyColor, solvedColor, unsolvedColor, gridData, coordinatesOrder } = props\n\n  return (\n    coordinatesOrder.map((coordinates, index) => {\n      const { x, y } = coordinates\n\n      return (\n        <table className=\"coordinates\" key={index}>\n          <tbody>\n            <tr>\n              <td>{getCoordinateLabel(x, y)}</td>\n            </tr>\n            <tr>\n              <SubGrid\n                isCoordinate={true}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={solvedColor}\n                unsolvedColor={unsolvedColor}\n                gridY={y}\n                gridX={x}\n                initialSubGridData={gridData[y][x]}\n              />\n            </tr>\n          </tbody>\n        </table>\n      )\n    })\n  )\n}\n\nCoordinates.propTypes = {\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Coordinates\n","import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n\nconst Footer = () => (\n  <Row className=\"footer\">\n    <Col>\n      Created by <a href=\"https://github.com/BrandonE\" target=\"_blank\" rel=\"noreferrer\">Brandon Evans</a>.\n      Inspired by <a href=\"https://web.archive.org/web/20111027002447/http://www.tipstricks.com/puzzles.html\" target=\"_blank\" rel=\"noreferrer\">Pencil Puzzles</a> from <a href=\"https://en.wikipedia.org/wiki/Tips_%26_Tricks_(magazine)\">Tips &amp; Tricks Magazine</a>\n      &nbsp; <a href=\"https://github.com/BrandonE/pixel-puzzles\" target=\"_blank\" rel=\"noreferrer\"><FontAwesomeIcon icon={faGithub}></FontAwesomeIcon></a>\n    </Col>\n  </Row>\n)\n\nexport default Footer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { decimalToHex } from '../lib/util'\n\nconst Cell = props => {\n  const {\n    onCellEdit, onCellChanged, filledColor, emptyColor,\n    gridY, gridX, subGridY, subGridX, isFilled\n  } = props\n\n  return (\n    <td\n      className=\"cell\"\n\n      style={{\n        backgroundColor: decimalToHex((isFilled) ? filledColor : emptyColor)\n      }}\n\n      onPointerDown={() => {\n        const { isFilled } = props\n\n        if (onCellEdit) {\n          onCellEdit(isFilled)\n        }\n\n        if (onCellChanged) {\n          onCellChanged(gridY, gridX, subGridY, subGridX, !isFilled)\n        }\n      }}\n\n      onMouseEnter={e => {\n        const { isFilling } = props\n\n        if (onCellChanged && e.buttons === undefined ? e.which === 1 : e.buttons === 1) {\n          onCellChanged(gridY, gridX, subGridY, subGridX, isFilling)\n        }\n      }}\n    >\n    </td>\n  )\n}\n\nCell.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  isFilling: PropTypes.bool,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  gridY: PropTypes.number.isRequired,\n  gridX: PropTypes.number.isRequired,\n  subGridY: PropTypes.number.isRequired,\n  subGridX: PropTypes.number.isRequired,\n  isFilled: PropTypes.number.isRequired\n}\n\nexport default Cell\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Cell from './Cell'\nimport { decimalToHex } from '../lib/util'\n\nclass SubGrid extends React.Component {\n  constructor (props) {\n    super()\n    const { isAuthoring, isCoordinate, isRevealing, subGridSize } = props\n    const { initialSubGridData } = props\n\n    const subGridData = []\n    const subGridFilling = []\n\n    for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n      const subGridDataRow = []\n      const subGridFillingRow = []\n\n      for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n        if (initialSubGridData) {\n          const initialValue = initialSubGridData[subGridY][subGridX]\n\n          subGridDataRow.push(initialValue)\n\n          if (isAuthoring || isCoordinate) {\n            subGridFillingRow.push(initialValue)\n          } else {\n            subGridFillingRow.push(0)\n          }\n        } else {\n          subGridDataRow.push(0)\n          subGridFillingRow.push(0)\n        }\n      }\n\n      subGridData.push(subGridDataRow)\n      subGridFilling.push(subGridFillingRow)\n    }\n\n    this.state = {\n      subGridData,\n      subGridFilling\n    }\n\n    if (isRevealing) {\n      setTimeout(() => {\n        this.setState({\n          subGridFilling: subGridData\n        })\n      }, Math.random() * 1000)\n    }\n\n    this.onCellChanged = this.onCellChanged.bind(this)\n    this.isSolved = this.isSolved.bind(this)\n  }\n\n  onCellChanged (gridY, gridX, subGridY, subGridX, value) {\n    const { onCellChanged, isAuthoring, isCoordinate } = this.props\n    const { subGridData, subGridFilling } = this.state\n\n    if (!isCoordinate && onCellChanged) {\n      if (isAuthoring) {\n        subGridData[subGridY][subGridX] = (value) ? 1 : 0\n        subGridFilling[subGridY][subGridX] = subGridData[subGridY][subGridX]\n        onCellChanged(gridY, gridX, subGridY, subGridX, value)\n      }\n\n      subGridFilling[subGridY][subGridX] = (value) ? 1 : 0\n    }\n\n    this.setState({\n      subGridData,\n      subGridFilling\n    })\n  }\n\n  isSolved () {\n    const { isAuthoring, isCoordinate } = this.props\n    const { subGridData, subGridFilling } = this.state\n    return (!isAuthoring && !isCoordinate && JSON.stringify(subGridData) === JSON.stringify(subGridFilling))\n  }\n\n  render () {\n    const {\n      onCellEdit, isCoordinate, isFilling, filledColor,\n      emptyColor, solvedColor, unsolvedColor, gridY, gridX\n    } = this.props\n    const { subGridFilling } = this.state\n\n    return (\n      <td\n        className=\"subGrid\"\n        style={{\n          border: `1px solid ${decimalToHex(this.isSolved() ? solvedColor : unsolvedColor)}`,\n          touchAction: (isCoordinate) ? 'auto' : 'none'\n        }}\n      >\n        <table>\n          <tbody>\n            {subGridFilling.map((subGridFillingRow, rowIndex) => (\n              <tr key={rowIndex}>\n                {subGridFillingRow.map((isFilled, colIndex) => (\n                  <Cell\n                    key={colIndex}\n                    onCellEdit={onCellEdit}\n                    onCellChanged={this.onCellChanged}\n                    isFilling={isFilling}\n                    filledColor={filledColor}\n                    emptyColor={emptyColor}\n                    gridY={gridY}\n                    gridX={gridX}\n                    subGridY={rowIndex}\n                    subGridX={colIndex}\n                    isFilled={isFilled}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </td>\n    )\n  }\n}\n\nSubGrid.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  isAuthoring: PropTypes.bool,\n  isCoordinate: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isRevealing: PropTypes.bool,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridY: PropTypes.number.isRequired,\n  gridX: PropTypes.number.isRequired,\n  initialSubGridData: PropTypes.array\n}\n\nexport default SubGrid\n"],"sourceRoot":""}