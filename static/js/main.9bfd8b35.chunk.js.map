{"version":3,"sources":["images/x.svg","lib/util.js","components/Cell.js","components/SubGrid.js","components/Grid.js","components/ErrorBoundary.js","components/Header.js","components/Coordinates.js","components/Main.js","components/Buttons.js","components/Footer.js","components/Crop.js","components/Print.js","App.js","reportWebVitals.js","index.js"],"names":["serializeGridData","gridData","flat","join","binaryStringToHexStringWithLeftovers","binaryString","hexStringWithLeftovers","i","length","nibble","substring","parseInt","toString","toUpperCase","generateCoordinatesOrder","gridSize","coordinatesOrder","gridY","gridX","push","x","y","arr","j","temp","Math","floor","random","shuffleArray","jimpToSerializedGridData","jimpFile","subGridSize","serializedGridData","bitmap","width","height","gridWidthAndHeight","Error","subGridY","subGridX","Jimp","intToRGBA","getPixelColor","r","g","b","a","gridDataToJimp","filledColor","emptyColor","count","setPixelColor","rgbaToInt","getXLabelValues","game","labelValues","continuousCells","getYLabel","decimalToHex","dec","padStart","getCoordinateLabel","Cell","props","React","useState","isCrossedOut","crossedOut","setCrossedOut","onCellEdit","onCellChanged","cellWidthAndHeight","isFilled","className","style","backgroundColor","undefined","backgroundImage","X","minWidth","minHeight","onPointerDown","e","button","isAuthoring","pointerType","onContextMenu","preventDefault","onCrossOut","isCrossingOut","onMouseEnter","isFilling","buttons","which","SubGrid","isCoordinate","isRevealing","initialSubGridData","subGridData","subGridFilling","subGridDataRow","subGridFillingRow","initialValue","state","setTimeout","setState","bind","isSolved","value","this","JSON","stringify","isPrinting","solvedColor","unsolvedColor","border","touchAction","map","rowIndex","colIndex","Component","Grid","getCellWidthAndHeight","noFloat","vw","match","vwValue","parseFloat","split","fontSize","replace","float","paddingRight","margin","Array","fill","_","verticalAlign","paddingDown","valueIndex","textAlign","ErrorBoundary","hasError","error","onError","Button","variant","type","onClick","window","location","reload","children","Header","href","changeGame","Coordinates","coordinates","index","Main","Buttons","changeMode","clear","revealSolution","invert","importImage","exportImage","share","resizeGrids","print","isReadOnly","gridSizeMin","gridSizeMax","subGridSizeMin","subGridSizeMax","nonogramGridSizeMin","nonogramGridSizeMax","Row","Col","DropdownButton","title","filter","size","Dropdown","Item","onSelect","Form","Label","Control","name","accept","onChange","Group","Footer","target","rel","icon","faGithub","Crop","isCropping","crop","cropComponentRef","createRef","onImageLoaded","getCroppedImg","onCropComplete","onCropChange","onAspectChange","image","imageRef","fileName","canvas","document","createElement","pixelRatio","devicePixelRatio","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","setTransform","imageSmoothingQuality","drawImage","Promise","resolve","reject","toBlob","blob","URL","revokeObjectURL","fileUrl","createObjectURL","croppedImageUrl","onCropProcessed","percentCrop","isInitializing","widthPercentage","heightPercentage","isSquare","aspect","unit","current","onMediaLoaded","imageSrc","loading","position","src","ruleOfThirds","onComplete","ref","controlId","Check","label","checked","Print","preventUnload","returnValue","App","isLoading","printableRef","initializeGrid","confirmChangeGame","confirmChangeMode","confirmImportImage","searchParams","URLSearchParams","search","query","Object","fromEntries","entries","includes","onselectstart","addEventListener","removeEventListener","inputGridData","pow","hexString","leftovers","digit","hexStringWithLeftoversToBinaryString","gridRow","subGridRow","generateGrid","filled","crossed","confirmAlert","message","set","delete","navigate","childrenElement","invertedSerializedGridData","file","files","reader","FileReader","read","result","getBase64","MIME_PNG","err","importedImageSrc","closeOnClickOutside","readAsDataURL","largerDimension","background","contain","resize","getBufferAsync","MIME_JPEG","u8","stringChar","reduce","data","byte","String","fromCharCode","b64Encoded","btoa","protocol","host","pathname","navigator","clipboard","writeText","toast","success","gridDataToPrint","trigger","content","scale","minimumWidthAndHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9bfd8b35.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/x.f5457199.svg\";","import Jimp from 'jimp/es'\n\n// https://stackoverflow.com/a/10142256/12055600\nconst shuffleArray = arr => {\n  let i = arr.length\n  let j\n  let temp\n\n  if (i === 0) {\n    return arr\n  }\n\n  while (--i) {\n    j = Math.floor(Math.random() * (i + 1))\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n  }\n\n  return arr\n}\n\nexport const serializeGridData = gridData => gridData.flat().flat().flat().join('')\n\nexport const binaryStringToHexStringWithLeftovers = binaryString => {\n  let hexStringWithLeftovers = ''\n\n  for (let i = 0; i < binaryString.length; i += 4) {\n    const nibble = binaryString.substring(i, i + 4)\n\n    if (nibble.length === 4) {\n      hexStringWithLeftovers += parseInt(nibble, 2).toString(16).toUpperCase()\n    } else {\n      hexStringWithLeftovers += '_' + nibble\n    }\n  }\n\n  return hexStringWithLeftovers\n}\n\nexport const hexStringWithLeftoversToBinaryString = hexStringWithLeftovers => {\n  const [hexString, leftovers] = hexStringWithLeftovers.split('_')\n\n  return hexString.split('').map(digit => parseInt(digit, 16).toString(2).padStart(4, '0')).join('') + leftovers\n}\n\nexport const generateGrid = (gridSize, subGridSize, serializedGridData) => {\n  const gridData = []\n  let count = 0\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    const gridRow = []\n\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      const subGridData = []\n\n      for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n        const subGridRow = []\n\n        for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n          const value = (serializedGridData) ? serializedGridData[count] : '0'\n          subGridRow.push((value === '1') ? 1 : 0)\n          count++\n        }\n\n        subGridData.push(subGridRow)\n      }\n\n      gridRow.push(subGridData)\n    }\n\n    gridData.push(gridRow)\n  }\n\n  return gridData\n}\n\nexport const generateCoordinatesOrder = gridSize => {\n  const coordinatesOrder = []\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      coordinatesOrder.push({\n        x: gridX,\n        y: gridY\n      })\n    }\n  }\n\n  return shuffleArray(coordinatesOrder)\n}\n\nexport const jimpToSerializedGridData = (jimpFile, gridSize, subGridSize) => {\n  let serializedGridData = ''\n  const { width, height } = jimpFile.bitmap\n  const gridWidthAndHeight = gridSize * subGridSize\n\n  if (gridWidthAndHeight !== width || gridWidthAndHeight !== height) {\n    // This should never be thrown.\n    throw new Error('Invalid image size.')\n  }\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n        for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n          const x = gridX * subGridSize + subGridX\n          const y = gridY * subGridSize + subGridY\n          const { r, g, b, a } = Jimp.intToRGBA(jimpFile.getPixelColor(x, y))\n          const rgb = r + g + b\n          const value = (rgb >= ((255 + 255 + 255) / 2) || a === 0) ? '0' : '1'\n          serializedGridData += value\n        }\n      }\n    }\n  }\n\n  return serializedGridData\n}\n\nexport const gridDataToJimp = (gridData, filledColor, emptyColor) => {\n  const serializedGridData = serializeGridData(gridData)\n  const gridSize = gridData.length\n  const subGridSize = gridData[0][0].length\n  const gridWidthAndHeight = gridSize * subGridSize\n\n  const jimpFile = new Jimp(gridWidthAndHeight, gridWidthAndHeight)\n  let count = 0\n\n  for (let gridY = 0; gridY < gridSize; gridY++) {\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n        for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n          const x = gridX * subGridSize + subGridX\n          const y = gridY * subGridSize + subGridY\n          const { r, g, b } = Jimp.intToRGBA((serializedGridData[count] === '1') ? filledColor : emptyColor)\n\n          jimpFile.setPixelColor(Jimp.rgbaToInt(r, g, b, 255), x, y)\n\n          count++\n        }\n      }\n    }\n  }\n\n  return jimpFile\n}\n\nexport const getXLabelValues = (x, game, gridData, gridSize) => {\n  if (!game || game === 'classic') {\n    return ['ABCDEFGHIJK'[x]]\n  } else if (game === 'nonogram') {\n    const labelValues = []\n    let continuousCells = 0\n\n    for (let gridY = 0; gridY < gridSize; gridY++) {\n      if (gridData[gridY][x][0][0]) {\n        continuousCells++\n      } else {\n        if (continuousCells) {\n          labelValues.push(continuousCells)\n        }\n\n        continuousCells = 0\n      }\n    }\n\n    if (continuousCells !== 0) {\n      labelValues.push(continuousCells)\n    } else if (labelValues.length === 0) {\n      labelValues.push(0)\n    }\n\n    return labelValues\n  }\n}\n\nexport const getYLabel = (y, game, gridData, gridSize) => {\n  if (!game || game === 'classic') {\n    return y + 1\n  } else if (game === 'nonogram') {\n    const labelValues = []\n    let continuousCells = 0\n\n    for (let gridX = 0; gridX < gridSize; gridX++) {\n      if (gridData[y][gridX][0][0]) {\n        continuousCells++\n      } else {\n        if (continuousCells) {\n          labelValues.push(continuousCells)\n        }\n\n        continuousCells = 0\n      }\n    }\n\n    if (continuousCells !== 0) {\n      labelValues.push(continuousCells)\n    } else if (labelValues.length === 0) {\n      labelValues.push(0)\n    }\n\n    return labelValues.join(',')\n  }\n}\n\nexport const decimalToHex = dec => `#${dec.toString(16).toUpperCase().padStart(6, '0')}`\nexport const getCoordinateLabel = (x, y) => getXLabelValues(x)[0] + getYLabel(y)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport X from '../images/x.svg'\nimport { decimalToHex } from '../lib/util'\n\nconst Cell = props => {\n  const [crossedOut, setCrossedOut] = React.useState({\n    isCrossedOut: false\n  })\n\n  const {\n    onCellEdit, onCellChanged, game, filledColor, emptyColor,\n    gridY, gridX, subGridY, subGridX, cellWidthAndHeight, isFilled\n  } = props\n\n  return (\n    <td\n      className=\"cell\"\n\n      style={{\n        backgroundColor: crossedOut.isCrossedOut ? undefined : decimalToHex((isFilled) ? filledColor : emptyColor),\n        backgroundImage: crossedOut.isCrossedOut ? `url(${X})` : undefined,\n        minWidth: cellWidthAndHeight,\n        minHeight: cellWidthAndHeight,\n        width: cellWidthAndHeight,\n        height: cellWidthAndHeight\n      }}\n\n      onPointerDown={(e) => {\n        // Ignore right-click.\n        if (e.button === 2) {\n          return\n        }\n\n        const { isAuthoring, isFilled } = props\n\n        if (onCellEdit) {\n          onCellEdit(isFilled)\n\n          if (\n            game === 'nonogram' && e.pointerType === 'touch' &&\n              !isAuthoring && isFilled && !crossedOut.isCrossedOut\n          ) {\n            setCrossedOut({ isCrossedOut: isFilled })\n            return\n          }\n        }\n\n        if (onCellChanged) {\n          onCellChanged(gridY, gridX, subGridY, subGridX, !isFilled)\n        }\n\n        setCrossedOut({ isCrossedOut: false })\n      }}\n\n      // Right-click\n      onContextMenu={(e) => {\n        e.preventDefault()\n\n        const { onCrossOut } = props\n\n        if (game !== 'nonogram' || props.isAuthoring || !onCrossOut) {\n          return\n        }\n\n        const isCrossingOut = !crossedOut.isCrossedOut\n\n        onCrossOut(isCrossingOut)\n        setCrossedOut({ isCrossedOut: isCrossingOut })\n        onCellChanged(gridY, gridX, subGridY, subGridX, false)\n      }}\n\n      onMouseEnter={e => {\n        const { isAuthoring, isFilling, isCrossingOut } = props\n\n        if (onCellChanged && e.buttons === undefined ? e.which === 1 : e.buttons === 1) {\n          onCellChanged(gridY, gridX, subGridY, subGridX, isFilling)\n\n          if (isFilling) {\n            setCrossedOut({ isCrossedOut: false })\n          }\n        } else if (game === 'nonogram' && e.buttons === 2 && !isAuthoring) {\n          setCrossedOut({ isCrossedOut: isCrossingOut })\n\n          if (isCrossingOut) {\n            onCellChanged(gridY, gridX, subGridY, subGridX, false)\n          }\n        }\n      }}\n    >\n    </td>\n  )\n}\n\nCell.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  onCrossOut: PropTypes.func,\n  game: PropTypes.string.isRequired,\n  isAuthoring: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isCrossingOut: PropTypes.bool,\n  isPrinting: PropTypes.bool,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  gridY: PropTypes.number.isRequired,\n  gridX: PropTypes.number.isRequired,\n  subGridY: PropTypes.number.isRequired,\n  subGridX: PropTypes.number.isRequired,\n  cellWidthAndHeight: PropTypes.string.isRequired,\n  isFilled: PropTypes.number.isRequired\n}\n\nexport default Cell\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Cell from './Cell'\nimport { decimalToHex } from '../lib/util'\n\nclass SubGrid extends React.Component {\n  constructor (props) {\n    super()\n    const { isAuthoring, isCoordinate, isRevealing, subGridSize } = props\n    const { initialSubGridData } = props\n\n    const subGridData = []\n    const subGridFilling = []\n\n    for (let subGridY = 0; subGridY < subGridSize; subGridY++) {\n      const subGridDataRow = []\n      const subGridFillingRow = []\n\n      for (let subGridX = 0; subGridX < subGridSize; subGridX++) {\n        if (initialSubGridData) {\n          const initialValue = initialSubGridData[subGridY][subGridX]\n\n          subGridDataRow.push(initialValue)\n\n          if (isAuthoring || isCoordinate) {\n            subGridFillingRow.push(initialValue)\n          } else {\n            subGridFillingRow.push(0)\n          }\n        } else {\n          subGridDataRow.push(0)\n          subGridFillingRow.push(0)\n        }\n      }\n\n      subGridData.push(subGridDataRow)\n      subGridFilling.push(subGridFillingRow)\n    }\n\n    this.state = {\n      subGridData,\n      subGridFilling\n    }\n\n    if (isRevealing) {\n      setTimeout(() => {\n        this.setState({\n          subGridFilling: subGridData\n        })\n      }, Math.random() * 1000)\n    }\n\n    this.onCellChanged = this.onCellChanged.bind(this)\n    this.isSolved = this.isSolved.bind(this)\n  }\n\n  onCellChanged (gridY, gridX, subGridY, subGridX, value) {\n    const { onCellChanged, isAuthoring, isCoordinate } = this.props\n    const { subGridData, subGridFilling } = this.state\n\n    if (!isCoordinate && onCellChanged) {\n      if (isAuthoring) {\n        subGridData[subGridY][subGridX] = (value) ? 1 : 0\n        subGridFilling[subGridY][subGridX] = subGridData[subGridY][subGridX]\n        onCellChanged(gridY, gridX, subGridY, subGridX, value)\n      }\n\n      subGridFilling[subGridY][subGridX] = (value) ? 1 : 0\n    }\n\n    this.setState({\n      subGridData,\n      subGridFilling\n    })\n  }\n\n  isSolved () {\n    const { isAuthoring, isCoordinate } = this.props\n    const { subGridData, subGridFilling } = this.state\n    // TODO: Hide non-printed coordinates when solved. Show Toast notification when all sub-grids are solved.\n    return (!isAuthoring && !isCoordinate && JSON.stringify(subGridData) === JSON.stringify(subGridFilling))\n  }\n\n  render () {\n    const {\n      onCellEdit, onCrossOut, isCoordinate, game, isAuthoring, isFilling, isCrossingOut, isPrinting,\n      filledColor, emptyColor, solvedColor, unsolvedColor,\n      cellWidthAndHeight, gridY, gridX\n    } = this.props\n    const { subGridFilling } = this.state\n\n    return (\n      <td\n        className=\"subGrid\"\n        style={{\n          border: (game === 'classic') ? `1px solid ${decimalToHex(this.isSolved() ? solvedColor : unsolvedColor)}` : undefined,\n          minWidth: cellWidthAndHeight,\n          minHeight: cellWidthAndHeight,\n          touchAction: (isCoordinate) ? 'auto' : 'none'\n        }}\n      >\n        <table>\n          <tbody>\n            {subGridFilling.map((subGridFillingRow, rowIndex) => (\n              <tr key={rowIndex}>\n                {subGridFillingRow.map((isFilled, colIndex) => (\n                  <Cell\n                    key={colIndex}\n                    onCellEdit={onCellEdit}\n                    onCellChanged={this.onCellChanged}\n                    onCrossOut={onCrossOut}\n                    game={game}\n                    isAuthoring={isAuthoring}\n                    isFilling={isFilling}\n                    isCrossingOut={isCrossingOut}\n                    isPrinting={isPrinting}\n                    filledColor={filledColor}\n                    emptyColor={emptyColor}\n                    gridY={gridY}\n                    gridX={gridX}\n                    subGridY={rowIndex}\n                    subGridX={colIndex}\n                    cellWidthAndHeight={cellWidthAndHeight}\n                    isFilled={isFilled}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </td>\n    )\n  }\n}\n\nSubGrid.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  onCrossOut: PropTypes.func,\n  game: PropTypes.string.isRequired,\n  isAuthoring: PropTypes.bool,\n  isCoordinate: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isCrossingOut: PropTypes.bool,\n  isRevealing: PropTypes.bool,\n  isPrinting: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridY: PropTypes.number.isRequired,\n  gridX: PropTypes.number.isRequired,\n  cellWidthAndHeight: PropTypes.string.isRequired,\n  initialSubGridData: PropTypes.array\n}\n\nexport default SubGrid\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SubGrid from './SubGrid'\nimport { getXLabelValues, getYLabel } from '../lib/util'\n\nconst Grid = props => {\n  const {\n    onCellEdit, onCellChanged, onCrossOut, getCellWidthAndHeight, game, isAuthoring, isFilling,\n    isCrossingOut, isRevealing, isPrinting, gridSize, subGridSize, filledColor, emptyColor,\n    solvedColor, unsolvedColor, gridData, noFloat\n  } = props\n\n  const cellWidthAndHeight = getCellWidthAndHeight(isPrinting)\n  const vw = cellWidthAndHeight.match(/[0-9]\\.*[0-9]*vw/)[0]\n  const vwValue = parseFloat(vw.split('vw')[0]) / 2\n  const fontSize = cellWidthAndHeight.replace(vw, `${vwValue}vw`).replace('40px', '10px')\n\n  return (\n    <div\n      className=\"grid\"\n      style={{\n        float: (game === 'classic' && !noFloat) ? 'left' : undefined,\n        paddingRight: (game === 'classic') ? '20px' : undefined\n      }}\n    >\n      <table\n        style={{\n          margin: (game === 'nonogram') ? 'auto' : undefined\n        }}\n      >\n        <tbody>\n          {(game === 'classic' || !isAuthoring) && (\n            <tr>\n              <td></td>\n\n              {Array(gridSize).fill().map((_, colIndex) => (\n                  <td\n                    key={colIndex}\n\n                    style={{\n                      fontSize: (game === 'nonogram') ? fontSize : undefined,\n                      verticalAlign: 'bottom',\n                      paddingDown: '5px'\n                    }}\n                  >\n                    {getXLabelValues(colIndex, game, gridData, gridSize).map((value, valueIndex) => (\n                      <span key={valueIndex}>{value}<br /></span>\n                    ))}\n                  </td>\n              ))}\n            </tr>\n          )}\n\n          {Array(gridSize).fill().map((_, rowIndex) => (\n            <tr key={rowIndex}>\n              {(game === 'classic' || !isAuthoring) && (\n                <td\n                  style={{\n                    fontSize: (game === 'nonogram') ? fontSize : undefined,\n                    textAlign: 'right',\n                    paddingRight: '5px'\n                  }}\n                >\n                  {getYLabel(rowIndex, game, gridData, gridSize)}\n                </td>\n              )}\n\n              {Array(gridSize).fill().map((_, colIndex) => (\n                <SubGrid\n                  key={colIndex}\n                  onCellEdit={onCellEdit}\n                  onCellChanged={onCellChanged}\n                  onCrossOut={onCrossOut}\n                  game={game}\n                  isAuthoring={isAuthoring}\n                  isFilling={isFilling}\n                  isCrossingOut={isCrossingOut}\n                  isRevealing={isRevealing}\n                  isPrinting={isPrinting}\n                  gridSize={gridSize}\n                  subGridSize={subGridSize}\n                  filledColor={filledColor}\n                  emptyColor={emptyColor}\n                  solvedColor={solvedColor}\n                  unsolvedColor={unsolvedColor}\n                  gridY={rowIndex}\n                  gridX={colIndex}\n                  cellWidthAndHeight={cellWidthAndHeight}\n                  initialSubGridData={gridData[rowIndex][colIndex]}\n                />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {!isAuthoring && game === 'nonogram' && (\n        <>\n          <p\n            style={{\n              fontSize,\n              textAlign: 'center'\n            }}\n          ><strong>Grid size: {gridSize}x{gridSize}</strong></p>\n        </>\n      )}\n    </div>\n  )\n}\n\nGrid.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  onCrossOut: PropTypes.func,\n  getCellWidthAndHeight: PropTypes.func.isRequired,\n  game: PropTypes.string,\n  isAuthoring: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isCrossingOut: PropTypes.bool,\n  isRevealing: PropTypes.bool,\n  isPrinting: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired,\n  noFloat: PropTypes.bool\n}\n\nexport default Grid\n","import React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport PropTypes from 'prop-types'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error) {\n    this.setState({ hasError: true })\n    this.props.onError(error)\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return (\n        <>\n          <h1>Something went wrong.</h1>\n          <Button variant=\"primary\" type=\"submit\" onClick={() => window.location.reload(false)}>Reload application</Button>\n        </>\n      )\n    }\n\n    return this.props.children\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ]).isRequired,\n  onError: PropTypes.func.isRequired\n}\n\nexport default ErrorBoundary\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Header = props => (\n  <>\n    {props.game === 'classic' && (\n      <>\n        <h1>Pixel Puzzles - Classic</h1>\n        <h4>Copy each square&apos;s pattern to the associated coordinates to reveal a secret image!</h4>\n      </>\n    )}\n\n    {props.game === 'nonogram' && (\n      <>\n        <h1>Pixel Puzzles - Nonogram</h1>\n        <h4>\n          Solve the {props.isPrinting && <>Nonogram</>} {!props.isPrinting && <a href=\"https://en.wikipedia.org/wiki/Nonogram\">Nonogram</a>} to reveal a secret image!&nbsp;\n\n          {!props.isPrinting && (\n            <a href=\"https://www.youtube.com/watch?v=zisu0Qf4TAI\">Nonogram Tutorial</a>\n          )}\n        </h4>\n      </>\n    )}\n\n    <h6>Fill the grid in your browser or print the puzzle to complete by hand. Edit the puzzle or generate your own using any image. Share puzzles with your friends and family! {props.isPrinting && <>https://brandone.github.io/pixel-puzzles/</>}</h6>\n\n    {!props.isPrinting && (\n      <>\n        {props.changeGame && props.game === 'classic' && (\n          <>\n            <h6><strong>Left-click or touch to fill or unfill a cell</strong></h6>\n            <br />\n            <h4>\n              <a href=\"\" onClick={e => {\n                e.preventDefault()\n                props.changeGame('nonogram')\n              }}>Switch to Nonogram mode</a>\n            </h4>\n          </>\n        )}\n\n        {props.changeGame && props.game === 'nonogram' && (\n          <>\n            <h6><strong>Left-click or touch to fill or unfill a cell. Right-click to cross out or uncross out a cell. On mobile, touching a filled cell will cross it out, and touching a crossed out cell will unfill it</strong></h6>\n            <br />\n            <h4>\n              <a href=\"\" onClick={e => {\n                e.preventDefault()\n                props.changeGame('classic')\n              }}>Switch to Classic mode</a>\n            </h4>\n          </>\n        )}\n      </>\n    )}\n  </>\n)\n\nHeader.propTypes = {\n  changeGame: PropTypes.func,\n  game: PropTypes.string.isRequired,\n  isPrinting: PropTypes.bool\n}\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SubGrid from './SubGrid'\nimport { getCoordinateLabel } from '../lib/util'\n\nconst Coordinates = props => {\n  const {\n    getCellWidthAndHeight, isPrinting, gridSize, subGridSize,\n    filledColor, emptyColor, solvedColor, unsolvedColor, gridData,\n    coordinatesOrder\n  } = props\n\n  const cellWidthAndHeight = getCellWidthAndHeight(isPrinting)\n\n  return (\n    coordinatesOrder.map((coordinates, index) => {\n      const { x, y } = coordinates\n\n      return (\n        <table className=\"coordinates\" key={index}>\n          <tbody>\n            <tr>\n              <td>{getCoordinateLabel(x, y)}</td>\n            </tr>\n            <tr>\n              <SubGrid\n                game=\"classic\"\n                isCoordinate={true}\n                gridSize={gridSize}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={solvedColor}\n                unsolvedColor={unsolvedColor}\n                gridY={y}\n                gridX={x}\n                cellWidthAndHeight={cellWidthAndHeight}\n                initialSubGridData={gridData[y][x]}\n              />\n            </tr>\n          </tbody>\n        </table>\n      )\n    })\n  )\n}\n\nCoordinates.propTypes = {\n  getCellWidthAndHeight: PropTypes.func.isRequired,\n  isPrinting: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Coordinates\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Grid from './Grid'\nimport Coordinates from './Coordinates'\n\nclass Main extends React.Component {\n  render () {\n    const {\n      onCellEdit, onCellChanged, onCrossOut, getCellWidthAndHeight, game,\n      isAuthoring, isFilling, isCrossingOut, gridSize, subGridSize,\n      filledColor, emptyColor, solvedColor, unsolvedColor, gridData,\n      coordinatesOrder\n    } = this.props\n\n    return (\n      <div>\n        <Grid\n          onCellEdit={onCellEdit}\n          onCellChanged={onCellChanged}\n          onCrossOut={onCrossOut}\n          getCellWidthAndHeight={getCellWidthAndHeight}\n          game={game}\n          isAuthoring={isAuthoring}\n          isFilling={isFilling}\n          isCrossingOut={isCrossingOut}\n          gridSize={gridSize}\n          subGridSize={subGridSize}\n          filledColor={filledColor}\n          emptyColor={emptyColor}\n          solvedColor={solvedColor}\n          unsolvedColor={unsolvedColor}\n          gridData={gridData}\n        />\n\n        {!isAuthoring && game === 'classic' && (\n          <Coordinates\n            getCellWidthAndHeight={getCellWidthAndHeight}\n            gridSize={gridSize}\n            subGridSize={subGridSize}\n            filledColor={filledColor}\n            emptyColor={emptyColor}\n            solvedColor={solvedColor}\n            unsolvedColor={unsolvedColor}\n            gridData={gridData}\n            coordinatesOrder={coordinatesOrder}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nMain.propTypes = {\n  onCellEdit: PropTypes.func,\n  onCellChanged: PropTypes.func,\n  onCrossOut: PropTypes.func,\n  getCellWidthAndHeight: PropTypes.func.isRequired,\n  game: PropTypes.string.isRequired,\n  isAuthoring: PropTypes.bool,\n  isFilling: PropTypes.bool,\n  isCrossingOut: PropTypes.bool,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  solvedColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Main\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Row, Col, Button, Form, Dropdown, DropdownButton } from 'react-bootstrap'\n\nconst Buttons = props => {\n  const {\n    game, changeMode, clear, revealSolution, invert, importImage, exportImage,\n    share, resizeGrids, print, isAuthoring, isReadOnly,\n    gridSizeMin, gridSizeMax, subGridSizeMin, subGridSizeMax,\n    nonogramGridSizeMin, nonogramGridSizeMax, gridData\n  } = props\n\n  const gridSize = gridData.length\n  const subGridSize = gridData[0][0].length\n\n  return (\n    <>\n      {isAuthoring && (\n        <>\n          <Row>\n            <Col>\n              <DropdownButton title=\"Resize Grid\">\n                {Array((game === 'classic') ? gridSizeMax : nonogramGridSizeMax).fill(0).map((_, i) => i + 1).filter(\n                  size => size >= ((game === 'classic') ? gridSizeMin : nonogramGridSizeMin) && size !== gridSize\n                ).map(size => (\n                  <Dropdown.Item\n                    key={size}\n                    onSelect={() => resizeGrids(size, subGridSize)}\n                  >\n                    {size}x{size}\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n\n              {game === 'classic' && (\n                <DropdownButton title=\"Resize Sub-Grid\">\n                { /* Sizes allowed are 2-9 */ }\n                {Array(subGridSizeMax).fill(0).map((_, i) => i + 1).filter(\n                  size => size >= subGridSizeMin && size !== subGridSize\n                ).map(size => (\n                  <Dropdown.Item\n                    key={size}\n                    onSelect={() => resizeGrids(gridSize, size)}\n                  >\n                    {size}x{size}\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n              )}\n              <Button onClick={invert}>Invert</Button>\n            </Col>\n          </Row>\n\n          <Row>\n            <Form.Label>Import from Image</Form.Label>\n            <Form.Control\n              type=\"file\" name=\"files\"\n              accept=\".bmp, .gif, .jpg, .jpeg, .png, .tiff\"\n              onChange={importImage}\n            />\n          </Row>\n\n          <Row>\n            <Col>\n              <Button onClick={exportImage}>Export as Image</Button>\n            </Col>\n          </Row>\n        </>\n      )}\n\n      {!isAuthoring && !isReadOnly && (\n        <Row>\n          <Col>\n            <Form.Group className=\"mb-3\">\n              <Button variant=\"warning\" onClick={revealSolution}>Reveal Solution</Button>\n            </Form.Group>\n          </Col>\n        </Row>\n      )}\n\n      {!isReadOnly && (\n        <Row>\n          <Col>\n            <Button variant=\"danger\" onClick={clear}>Clear</Button>\n            <Button variant=\"danger\" onClick={changeMode}>{(isAuthoring) ? 'Play' : 'Edit'}</Button>\n          </Col>\n        </Row>\n      )}\n\n      <Row>\n        <Col>\n          <Button onClick={print}>Print</Button>\n          <Button onClick={share}>Share</Button>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nButtons.propTypes = {\n  game: PropTypes.string.isRequired,\n  changeMode: PropTypes.func.isRequired,\n  clear: PropTypes.func.isRequired,\n  revealSolution: PropTypes.func.isRequired,\n  invert: PropTypes.func.isRequired,\n  importImage: PropTypes.func.isRequired,\n  exportImage: PropTypes.func.isRequired,\n  share: PropTypes.func.isRequired,\n  resizeGrids: PropTypes.func.isRequired,\n  print: PropTypes.func.isRequired,\n  isAuthoring: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  gridSizeMin: PropTypes.number.isRequired,\n  gridSizeMax: PropTypes.number.isRequired,\n  subGridSizeMin: PropTypes.number.isRequired,\n  subGridSizeMax: PropTypes.number.isRequired,\n  nonogramGridSizeMin: PropTypes.number.isRequired,\n  nonogramGridSizeMax: PropTypes.number.isRequired,\n  gridData: PropTypes.array.isRequired\n}\n\nexport default Buttons\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Row, Col } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n\nconst Footer = props => (\n  <Row className=\"footer\">\n    <Col>\n      Created by <a href=\"https://github.com/BrandonE\" target=\"_blank\" rel=\"noreferrer\">Brandon Evans</a>\n\n      {props.game === 'classic' && (\n        <>\n          .&nbsp;Inspired by <a href=\"https://web.archive.org/web/20111027002447/http://www.tipstricks.com/puzzles.html\" target=\"_blank\" rel=\"noreferrer\">Pencil Puzzles</a> from <a href=\"https://en.wikipedia.org/wiki/Tips_%26_Tricks_(magazine)\">Tips &amp; Tricks Magazine</a>\n        </>\n      )}\n\n      &nbsp; <a href=\"https://github.com/BrandonE/pixel-puzzles\" target=\"_blank\" rel=\"noreferrer\"><FontAwesomeIcon icon={faGithub}></FontAwesomeIcon></a>\n    </Col>\n  </Row>\n)\n\nFooter.propTypes = {\n  game: PropTypes.string.isRequired\n}\n\nexport default Footer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Form } from 'react-bootstrap'\nimport ReactCrop from 'react-image-crop'\nimport { SpinnerComponent } from 'react-element-spinner'\nimport ScrollArea from 'react-scrollbar'\nimport 'react-image-crop/dist/ReactCrop.css'\n\nclass Crop extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      isCropping: true,\n      crop: {}\n    }\n\n    this.cropComponentRef = React.createRef()\n\n    this.onImageLoaded = this.onImageLoaded.bind(this)\n    this.getCroppedImg = this.getCroppedImg.bind(this)\n    this.onCropComplete = this.onCropComplete.bind(this)\n    this.onCropChange = this.onCropChange.bind(this)\n    this.onAspectChange = this.onAspectChange.bind(this)\n  }\n\n  componentDidMount () {\n    this.onAspectChange(true)\n  }\n\n  onImageLoaded (image) {\n    this.imageRef = image\n  }\n\n  async getCroppedImg (image, crop, fileName) {\n    const canvas = document.createElement('canvas')\n    const pixelRatio = window.devicePixelRatio\n    const scaleX = image.naturalWidth / image.width\n    const scaleY = image.naturalHeight / image.height\n    const ctx = canvas.getContext('2d')\n\n    canvas.width = crop.width * pixelRatio * scaleX\n    canvas.height = crop.height * pixelRatio * scaleY\n\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0)\n    ctx.imageSmoothingQuality = 'high'\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width * scaleX,\n      crop.height * scaleY\n    )\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        (blob) => {\n          if (!blob) {\n            reject(new Error('Canvas is empty'))\n            return\n          }\n\n          blob.name = fileName\n          window.URL.revokeObjectURL(this.fileUrl)\n          this.fileUrl = window.URL.createObjectURL(blob)\n          resolve(this.fileUrl)\n        },\n        'image/png'\n      )\n    })\n  }\n\n  async onCropComplete (crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      this.setState({\n        isCropping: true\n      })\n\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        'newFile.png'\n      )\n\n      this.props.onCropProcessed(croppedImageUrl)\n\n      this.setState({\n        isCropping: false\n      })\n    }\n  }\n\n  onCropChange (crop, percentCrop) {\n    this.setState({ crop: percentCrop })\n  }\n\n  onAspectChange (isInitializing) {\n    const { width, height } = this.props\n    const { crop } = this.state\n    const isSquare = !crop.aspect\n    let widthPercentage, heightPercentage\n\n    if (isSquare) {\n      if (width < height) {\n        widthPercentage = 100\n        heightPercentage = width / height * 100\n      } else {\n        heightPercentage = 100\n        widthPercentage = height / width * 100\n      }\n    } else {\n      widthPercentage = 100\n      heightPercentage = 100\n    }\n\n    this.setState({\n      crop: {\n        unit: '%',\n        width: widthPercentage,\n        height: heightPercentage,\n        x: 0,\n        y: 0,\n        aspect: (isSquare) ? 1 : undefined\n      }\n    }, () => {\n      if (!isInitializing) {\n        this.cropComponentRef.current.onMediaLoaded()\n      }\n    })\n  }\n\n  render () {\n    const { imageSrc } = this.props\n    const { isCropping, crop } = this.state\n\n    return (\n      <div>\n        <SpinnerComponent loading={isCropping} position=\"global\" />\n\n        <ScrollArea>\n          <ReactCrop\n            src={imageSrc}\n            crop={crop}\n            ruleOfThirds\n            onImageLoaded={this.onImageLoaded}\n            onComplete={this.onCropComplete}\n            onChange={this.onCropChange}\n            ref={this.cropComponentRef}\n          />\n        </ScrollArea>\n\n        <Form>\n          <Form.Group controlId=\"formBasicCheckbox\">\n            <Form.Check\n              type=\"checkbox\" label=\"Square Aspect Ratio (1:1)\"\n              checked={!!crop.aspect} onChange={() => this.onAspectChange()}\n            />\n          </Form.Group>\n        </Form>\n      </div>\n    )\n  }\n}\n\nCrop.propTypes = {\n  imageSrc: PropTypes.string.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  onCropProcessed: PropTypes.func.isRequired\n}\n\nexport default Crop\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Header from './Header'\nimport Grid from './Grid'\nimport Coordinates from './Coordinates'\nimport Footer from './Footer'\n\nclass Print extends React.Component {\n  render () {\n    const {\n      getCellWidthAndHeight, game, gridSize, subGridSize, filledColor, emptyColor,\n      // Don't indicate which boxes are empty to begin with; always use unsolved color.\n      unsolvedColor, gridData, coordinatesOrder\n    } = this.props\n\n    if (!gridData) {\n      return <></>\n    }\n\n    return (\n      <div className=\"print\">\n        <Header\n          game={game}\n          isPrinting={true}\n        />\n\n        {gridData && (\n          <>\n            <Grid\n              getCellWidthAndHeight={getCellWidthAndHeight}\n              game={game}\n              isPrinting={true}\n              gridSize={gridSize}\n              subGridSize={subGridSize}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={unsolvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={gridData}\n            />\n\n            {game === 'classic' && (\n              <Coordinates\n                getCellWidthAndHeight={getCellWidthAndHeight}\n                isPrinting={true}\n                gridSize={gridSize}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                solvedColor={unsolvedColor}\n                unsolvedColor={unsolvedColor}\n                gridData={gridData}\n                coordinatesOrder={coordinatesOrder}\n              />\n            )}\n          </>\n        )}\n\n        <Footer game={game} />\n      </div>\n    )\n  }\n}\n\nPrint.propTypes = {\n  getCellWidthAndHeight: PropTypes.func.isRequired,\n  game: PropTypes.string.isRequired,\n  gridSize: PropTypes.number.isRequired,\n  subGridSize: PropTypes.number.isRequired,\n  filledColor: PropTypes.number.isRequired,\n  emptyColor: PropTypes.number.isRequired,\n  unsolvedColor: PropTypes.number.isRequired,\n  gridData: PropTypes.array,\n  coordinatesOrder: PropTypes.array.isRequired\n}\n\nexport default Print\n","import React from 'react'\nimport Grid from './components/Grid'\nimport { Form, Button } from 'react-bootstrap'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast, ToastContainer } from 'react-toastify'\nimport { SpinnerComponent } from 'react-element-spinner'\nimport ReactToPrint from 'react-to-print'\nimport Jimp from 'jimp/es'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './App.css'\nimport ErrorBoundary from './components/ErrorBoundary'\nimport Header from './components/Header'\nimport Main from './components/Main'\nimport Buttons from './components/Buttons'\nimport Footer from './components/Footer'\nimport Crop from './components/Crop'\nimport {\n  generateGrid, generateCoordinatesOrder, serializeGridData,\n  binaryStringToHexStringWithLeftovers, hexStringWithLeftoversToBinaryString,\n  jimpToSerializedGridData, gridDataToJimp\n} from './lib/util'\nimport Print from './components/Print'\n\nconst inputGridDataGitHub30x30 = '000000000019C27FFFFFFFFFFFFFFFFC39FFFC000638000000000231BFFFFFBFFFFC7FFFFFFFFFFFFFFFFFE3DFFFDE00431839DEF7FBDEF782000018000001800004000001EF7BDFCE7BDEFFFFFFFB9CE700000000000000000000000001E739CFFFFFFFFFFFFFF39CE700000000000000000000000000E739CFFFFFFFFBDEF3FBFFFDC00873E00001000000080013FDFFFFFFFF7BDC38C6106FBDF7FFFFB410800000840007FFFFFFFFFFFFCC62000000003CE3003FFFFCE0000000000007FFFFF3DCC000000000'\nconst inputGridDataGitHub15x15 = '07C03FE0FFE33E6600FC01F803F003E00FC01FC07AE3E207C30F0308_0'\n\nconst gridSizeMin = 2\nconst gridSizeMax = 9\nconst subGridSizeMin = 2\nconst subGridSizeMax = 9\n\nconst nonogramGridSizeMin = 5\nconst nonogramGridSizeMax = 20\n\nconst defaultGridSize = 8\nconst defaultSubGridSize = 5\nconst defaultNonogramGridSize = 15\n\nconst filledColor = 0x00000000\nconst emptyColor = 0xFFFFFFFF\nconst solvedColor = 0xFFFF00FF\nconst unsolvedColor = 0x808080FF\n\nconst preventUnload = e => {\n  // Cancel the event\n  e.preventDefault() // If you prevent default behavior in Mozilla Firefox prompt will always be shown\n  // Chrome requires returnValue to be set\n  e.returnValue = ''\n}\n\nclass App extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      game: 'classic',\n      isAuthoring: false,\n      isReadOnly: false,\n      // TODO: Move this down to Grid to avoid re-rendering coordinates and make things faster.\n      isFilling: false,\n      isCrossingOut: false,\n      isLoading: false,\n      gridSize: undefined,\n      subGridSize: undefined\n    }\n\n    this.printableRef = React.createRef()\n\n    this.initializeGrid = this.initializeGrid.bind(this)\n    this.onCellEdit = this.onCellEdit.bind(this)\n    this.onCellChanged = this.onCellChanged.bind(this)\n    this.onCrossOut = this.onCrossOut.bind(this)\n    this.changeGame = this.changeGame.bind(this)\n    this.confirmChangeGame = this.confirmChangeGame.bind(this)\n    this.changeMode = this.changeMode.bind(this)\n    this.confirmChangeMode = this.confirmChangeMode.bind(this)\n    this.clear = this.clear.bind(this)\n    this.revealSolution = this.revealSolution.bind(this)\n    this.invert = this.invert.bind(this)\n    this.onCropProcessed = this.onCropProcessed.bind(this)\n    this.importImage = this.importImage.bind(this)\n    this.confirmImportImage = this.confirmImportImage.bind(this)\n    this.exportImage = this.exportImage.bind(this)\n    this.share = this.share.bind(this)\n    this.resizeGrids = this.resizeGrids.bind(this)\n    this.getCellWidthAndHeight = this.getCellWidthAndHeight.bind(this)\n    this.print = this.print.bind(this)\n  }\n\n  componentDidMount () {\n    const searchParams = new URLSearchParams(window.location.search)\n    const query = Object.fromEntries(searchParams.entries())\n\n    const game = (['classic', 'nonogram'].includes(query.game)) ? query.game : 'classic'\n\n    let gridSize = parseInt(query.gridSize, 10)\n    let subGridSize = parseInt(query.subGridSize, 10)\n\n    if (game === 'classic') {\n      if (!gridSize || gridSize < gridSizeMin || gridSize > gridSizeMax) {\n        gridSize = defaultGridSize\n      }\n\n      if (!subGridSize || subGridSize < subGridSizeMin || subGridSize > subGridSizeMax) {\n        subGridSize = defaultSubGridSize\n      }\n    } else if (game === 'nonogram') {\n      if (!gridSize || gridSize < nonogramGridSizeMin || gridSize > nonogramGridSizeMax) {\n        gridSize = defaultNonogramGridSize\n      }\n\n      subGridSize = 1\n    }\n\n    document.onselectstart = () => false\n\n    window.addEventListener('beforeunload', preventUnload)\n\n    const { gridData } = query\n\n    this.initializeGrid(game, gridSize, subGridSize, gridData)\n\n    const isAuthoring = (query.isAuthoring === 'true')\n\n    this.setState({\n      game,\n      isAuthoring,\n      isReadOnly: (query.isReadOnly === 'true') && !isAuthoring,\n      gridSize,\n      subGridSize\n    })\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('beforeunload', preventUnload)\n  }\n\n  navigate (searchParams) {\n    window.removeEventListener('beforeunload', preventUnload)\n    window.location.search = searchParams.toString()\n  }\n\n  initializeGrid (game, gridSize, subGridSize, inputGridData) {\n    if (!inputGridData && game === 'classic' && gridSize === defaultGridSize && subGridSize === defaultSubGridSize) {\n      inputGridData = inputGridDataGitHub30x30\n    }\n\n    if (!inputGridData && game === 'nonogram' && gridSize === defaultNonogramGridSize) {\n      inputGridData = inputGridDataGitHub15x15\n    }\n\n    const serializedGridData = (inputGridData.length === Math.pow(gridSize * subGridSize, 2))\n      ? inputGridData\n      : hexStringWithLeftoversToBinaryString(inputGridData)\n\n    this.gridData = generateGrid(gridSize, subGridSize, serializedGridData)\n    this.coordinatesOrder = generateCoordinatesOrder(gridSize)\n  }\n\n  onCellEdit (filled) {\n    this.setState({\n      isFilling: !filled\n    })\n  }\n\n  onCellChanged (gridY, gridX, subGridY, subGridX, value) {\n    this.gridData[gridY][gridX][subGridY][subGridX] = (value) ? 1 : 0\n  }\n\n  onCrossOut (crossed) {\n    this.setState({\n      isCrossingOut: crossed\n    })\n  }\n\n  changeGame (game) {\n    const { isAuthoring } = this.state\n\n    confirmAlert({\n      title: 'Confirmation',\n      message: `Are you sure you want to change the game mode? ${(isAuthoring) ? 'This will clear the canvas and cannot be undone.' : 'This will undo your progress.'}`,\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => this.confirmChangeGame(game)\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  confirmChangeGame (game) {\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('game', game)\n    searchParams.delete('gridData')\n    searchParams.delete('gridSize')\n    searchParams.delete('subGridSize')\n    searchParams.delete('isReadOnly')\n    this.navigate(searchParams)\n  }\n\n  changeMode () {\n    const { isAuthoring } = this.state\n\n    if (isAuthoring) {\n      this.confirmChangeMode()\n    } else {\n      confirmAlert({\n        title: 'Confirmation',\n        message: 'Are you sure you want to edit the puzzle? This will undo your progress and reveal the solution!',\n        buttons: [\n          {\n            label: 'Yes',\n            onClick: this.confirmChangeMode\n          },\n          {\n            label: 'No'\n          }\n        ]\n      })\n    }\n  }\n\n  confirmChangeMode () {\n    const { isAuthoring } = this.state\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', binaryStringToHexStringWithLeftovers(serializeGridData(this.gridData)))\n    searchParams.set('isAuthoring', JSON.stringify(!isAuthoring))\n    searchParams.delete('isReadOnly')\n    this.navigate(searchParams)\n  }\n\n  clear () {\n    const { isAuthoring } = this.state\n\n    confirmAlert({\n      title: 'Confirmation',\n      message: `Are you sure you want to clear ${isAuthoring ? 'the canvas' : 'your progress'}? This cannot be undone.`,\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            const searchParams = new URLSearchParams(window.location.search)\n\n            if (isAuthoring) {\n              // Clear the canvas.\n              searchParams.set('gridData', '0')\n            } else {\n              // Clear your progress, not the grid data (actual puzzle contents).\n              searchParams.set('gridData', binaryStringToHexStringWithLeftovers(serializeGridData(this.gridData)))\n            }\n\n            searchParams.set('isAuthoring', JSON.stringify(isAuthoring))\n            this.navigate(searchParams)\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  revealSolution () {\n    confirmAlert({\n      title: 'Confirmation',\n      message: 'Are you sure you want to reveal the solution? This spoils the fun!',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            setTimeout(() => {\n              confirmAlert({\n                title: 'Solution',\n                childrenElement: () => {\n                  const { game, gridSize, subGridSize } = this.state\n\n                  if (!this.gridData) {\n                    return <></>\n                  }\n\n                  return (\n                    <Grid\n                      getCellWidthAndHeight={this.getCellWidthAndHeight}\n                      game={game}\n                      isRevealing={true}\n                      isFilling={false}\n                      isCrossingOut={false}\n                      gridSize={gridSize}\n                      subGridSize={subGridSize}\n                      filledColor={filledColor}\n                      emptyColor={emptyColor}\n                      solvedColor={solvedColor}\n                      unsolvedColor={unsolvedColor}\n                      gridData={this.gridData}\n                      noFloat={true}\n                    />\n                  )\n                },\n                buttons: [\n                  {\n                    label: 'Continue'\n                  }\n                ]\n              })\n            }, 0) // Required to make sure the first alert is dismissed before the next is revealed.\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  invert () {\n    const serializedGridData = serializeGridData(this.gridData)\n    let invertedSerializedGridData = ''\n\n    for (let i = 0; i < serializedGridData.length; i++) {\n      invertedSerializedGridData += (serializedGridData[i] === '1') ? '0' : '1'\n    }\n\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', binaryStringToHexStringWithLeftovers(invertedSerializedGridData))\n    this.navigate(searchParams)\n  }\n\n  onCropProcessed (croppedImageUrl) {\n    this.setState({ croppedImageUrl })\n  }\n\n  importImage (e) {\n    const file = e.target.files[0]\n    e.target.value = ''\n\n    this.setState({\n      isLoading: true\n    })\n\n    const reader = new FileReader()\n\n    reader.addEventListener('load', async () => {\n      const jimpFile = await Jimp.read(reader.result)\n      const { width, height } = jimpFile.bitmap\n\n      const importedImageSrc = await new Promise((resolve, reject) => {\n        // Converting to PNG ensures GIFs are processed properly.\n        jimpFile.getBase64(Jimp.MIME_PNG, (err, src) => {\n          if (err) {\n            reject(err)\n          } else {\n            resolve(src)\n          }\n        })\n      })\n\n      this.setState({\n        isLoading: false\n      })\n\n      confirmAlert({\n        title: 'Confirmation',\n        message: 'Are you sure you want to import this image? Your current canvas will be overwritten.',\n        childrenElement: () => <Crop\n          imageSrc={importedImageSrc}\n          width={width}\n          height={height}\n          onImageLoaded={this.onImageLoaded}\n          onCropProcessed={this.onCropProcessed}\n        />,\n        buttons: [\n          {\n            label: 'Import',\n            onClick: () => this.confirmImportImage()\n          },\n          {\n            label: 'Cancel'\n          }\n        ],\n        closeOnClickOutside: false\n      })\n    })\n\n    reader.readAsDataURL(file)\n  }\n\n  async confirmImportImage () {\n    const { croppedImageUrl } = this.state\n\n    this.setState({\n      isLoading: true\n    })\n\n    const jimpFile = await Jimp.read(croppedImageUrl)\n    const gridSize = this.gridData.length\n    const subGridSize = this.gridData[0][0].length\n    const gridWidthAndHeight = gridSize * subGridSize\n\n    const { width, height } = jimpFile.bitmap\n    const largerDimension = (width > height) ? width : height\n\n    jimpFile\n      .background(0xFFFFFFFF)\n      .contain(largerDimension, largerDimension)\n      .resize(gridWidthAndHeight, gridWidthAndHeight)\n\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('gridData', binaryStringToHexStringWithLeftovers(jimpToSerializedGridData(jimpFile, gridSize, subGridSize)))\n    this.navigate(searchParams)\n  }\n\n  async exportImage () {\n    const image = gridDataToJimp(this.gridData, filledColor, emptyColor)\n    const u8 = await image.getBufferAsync(Jimp.MIME_JPEG)\n\n    // https://medium.com/@koteswar.meesala/convert-array-buffer-to-base64-string-to-display-images-in-angular-7-4c443db242cd\n    const stringChar = u8.reduce((data, byte) => {\n      return data + String.fromCharCode(byte)\n    }, '')\n\n    const b64Encoded = btoa(stringChar)\n\n    confirmAlert({\n      title: 'Image',\n      childrenElement: () => {\n        return (\n          <>\n            Right-click and &quot;Save Image As&quot; to download the image.\n            <div><img src={`data:image/jpeg;base64, ${b64Encoded}`} /></div>\n          </>\n        )\n      },\n      buttons: [\n        {\n          label: 'Continue'\n        }\n      ]\n    })\n  }\n\n  share () {\n    const { protocol, host, pathname } = window.location\n    const searchParams = new URLSearchParams(window.location.search)\n    searchParams.set('isAuthoring', 'false')\n    searchParams.delete('isReadOnly')\n    searchParams.set('gridData', binaryStringToHexStringWithLeftovers(serializeGridData(this.gridData)))\n    navigator.clipboard.writeText(`${protocol}//${host}${pathname}?${searchParams.toString()}`)\n    toast.success('URL copied to your clipboard!')\n  }\n\n  resizeGrids (gridSize, subGridSize) {\n    confirmAlert({\n      title: 'Confirmation',\n      message: 'Are you sure you want to resize? This will clear the canvas.',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            const searchParams = new URLSearchParams(window.location.search)\n            searchParams.set('gridSize', gridSize)\n            searchParams.set('subGridSize', subGridSize)\n            searchParams.set('gridData', '0')\n            this.navigate(searchParams)\n          }\n        },\n        {\n          label: 'No'\n        }\n      ]\n    })\n  }\n\n  print () {\n    this.setState({\n      gridDataToPrint: this.gridData\n    })\n\n    confirmAlert({\n      title: 'Print',\n      message: 'Click this button to print the puzzle. Works best on Google Chrome. ',\n      childrenElement: () => (\n        <ReactToPrint\n          trigger={() => (\n            <Button>Print</Button>\n          )}\n          content={() => this.printableRef.current}\n        />\n      ),\n      buttons: [\n        {\n          label: 'Cancel'\n        }\n      ]\n    })\n  }\n\n  getCellWidthAndHeight (isPrinting) {\n    const { game, gridSize, subGridSize } = this.state\n\n    let scale, minimumWidthAndHeight\n\n    if (game === 'classic') {\n      scale = isPrinting ? 50 : 40\n      minimumWidthAndHeight = '6px'\n    } else if (game === 'nonogram') {\n      scale = isPrinting ? 75 : 40\n      minimumWidthAndHeight = isPrinting ? '10px' : '40px'\n    }\n\n    return (game === 'classic' || isPrinting)\n      ? `max(${scale / (gridSize * subGridSize)}vw, ${minimumWidthAndHeight})`\n      : `min(${scale / (gridSize * subGridSize)}vw, ${minimumWidthAndHeight})`\n  }\n\n  render () {\n    const {\n      game, isAuthoring, isReadOnly, isFilling, isCrossingOut, gridSize, subGridSize,\n      isLoading, gridDataToPrint, hasError\n    } = this.state\n\n    if (hasError) {\n      <h1>An unexpected error has occurred. Please reload this page.</h1>\n    }\n\n    if (!this.gridData) {\n      return <></>\n    }\n\n    return (\n      <>\n        <ToastContainer />\n\n        <ErrorBoundary onError={err => toast.error(err.toString())}>\n          <div className=\"no-print\">\n            <SpinnerComponent loading={isLoading} position=\"global\" />\n\n            <Header\n              changeGame={this.changeGame}\n              game={game}\n            />\n\n            <Main\n              onCellEdit={this.onCellEdit}\n              onCellChanged={this.onCellChanged}\n              onCrossOut={this.onCrossOut}\n              getCellWidthAndHeight={this.getCellWidthAndHeight}\n              game={game}\n              isAuthoring={isAuthoring}\n              isFilling={isFilling}\n              isCrossingOut={isCrossingOut}\n              gridSize={gridSize}\n              subGridSize={subGridSize}\n              filledColor={filledColor}\n              emptyColor={emptyColor}\n              solvedColor={solvedColor}\n              unsolvedColor={unsolvedColor}\n              gridData={this.gridData}\n              coordinatesOrder={this.coordinatesOrder}\n            />\n\n            <Form className=\"mainForm\">\n              <Buttons\n                game={game}\n                changeMode={this.changeMode}\n                clear={this.clear}\n                revealSolution={this.revealSolution}\n                invert={this.invert}\n                importImage={this.importImage}\n                exportImage={this.exportImage}\n                share={this.share}\n                resizeGrids={this.resizeGrids}\n                print={this.print}\n                isAuthoring={isAuthoring}\n                isReadOnly={isReadOnly}\n                gridSizeMin={gridSizeMin}\n                gridSizeMax={gridSizeMax}\n                subGridSizeMin={subGridSizeMin}\n                subGridSizeMax={subGridSizeMax}\n                nonogramGridSizeMin={nonogramGridSizeMin}\n                nonogramGridSizeMax={nonogramGridSizeMax}\n                gridData={this.gridData}\n              />\n\n              <Footer game={game} />\n\n              <Print\n                getCellWidthAndHeight={this.getCellWidthAndHeight}\n                gridSize={gridSize}\n                subGridSize={subGridSize}\n                filledColor={filledColor}\n                emptyColor={emptyColor}\n                unsolvedColor={unsolvedColor}\n                gridData={gridDataToPrint}\n                coordinatesOrder={this.coordinatesOrder}\n                game={game}\n                ref={this.printableRef}\n              />\n            </Form>\n          </div>\n\n          <div className=\"print\">\n            <h3>Unsupported operation! To print this puzzle, please click the <em>Print</em> button on the webpage itself</h3>\n          </div>\n        </ErrorBoundary>\n      </>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}